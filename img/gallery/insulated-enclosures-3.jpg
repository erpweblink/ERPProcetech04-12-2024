mt.Text = Convert.ToDecimal(00).ToString("##.00");
            }
            else
            {
                txt_cgst_amt.Text = Convert.ToDecimal(00).ToString("##.00");
                txt_sgst_amt.Text = Convert.ToDecimal(00).ToString("##.00");
                txt_igst_amt.Text = Convert.ToDecimal(totalrateqty).ToString("##.00");
            }
        }

        ScriptManager.RegisterStartupScript(this, this.GetType(), "Success", "scrollToElement();", true);
    }

    protected void gv_cancel_Click(object sender, EventArgs e)
    {
        GridViewRow row = (sender as LinkButton).NamingContainer as GridViewRow;

        string Tax = ((TextBox)row.FindControl("txt_tax_grd")).Text;
        string Quntity = ((TextBox)row.FindControl("txt_quntity_grd")).Text;
        string Rate = ((TextBox)row.FindControl("txt_rate_grd")).Text;
        string Discount = ((TextBox)row.FindControl("txt_discount_grd")).Text;
        string TotalAmount = ((TextBox)row.FindControl("txt_total_amount_grd")).Text;

        DataTable Dt = ViewState["CPO_Product"] as DataTable;
        gvPurchaseRecord.EditIndex = -1;
        //Show_Grid();
        //gvPurchaseRecord.DataBind();
        ViewState["CPO_Product"] = Dt;
        gvPurchaseRecord.EditIndex = -1;

        gvPurchaseRecord.DataSource = (DataTable)ViewState["CPO_Product"];
        gvPurchaseRecord.DataBind();
        ScriptManager.RegisterStartupScript(this, this.GetType(), "Success", "scrollToElement();", true);
    }

    protected void txt_rate_grd_TextChanged(object sender, EventArgs e)
    {
        GridViewRow row = (sender as TextBox).NamingContainer as GridViewRow;

        Grid_Calculation(row);
    }

    protected void txt_quntity_grd_TextChanged(object sender, EventArgs e)
    {
        GridViewRow row = (sender as TextBox).NamingContainer as GridViewRow;

        Grid_Calculation(row);
    }

    protected void txt_tax_grd_TextChanged(object sender, EventArgs e)
    {
        GridViewRow row = (sender as TextBox).NamingContainer as GridViewRow;

        Grid_Calculation(row);
    }

    protected void txt_discount_grd_TextChanged(object sender, EventArgs e)
    {
        GridViewRow row = (sender as TextBox).NamingContainer as GridViewRow;

        Grid_Calculation(row);
    }

    protected void txt_round_off_TextChanged(object sender, EventArgs e)
    {
        //txt_round_off.Text = "0";
        decimal Round_Off;
        if (txt_round_off.Text == "0")
        {
            Round_Off = 0;
            //decimal Cgst_Total_Amt;
            //if (string.IsNullOrEmpty(txt_total.Text))
            //{
            //    Cgst_Total_Amt = 0;

            //}
            //else
            //{
            //    decimal val1 = Convert.ToDecimal(txt_total.Text);

            //    Cgst_Total_Amt = (val1 * 9 / 100);
            //}
            //txt_cgst_amt.Text = Cgst_Total_Amt.ToString("##.00");

            //decimal Sgst_Toatl_Amt;
            //if (string.IsNullOrEmpty(txt_total.Text))
            //{
            //    Sgst_Toatl_Amt = 0;

            //}
            //else
            //{
            //    decimal val1 = Convert.ToDecimal(txt_total.Text);

            //    Sgst_Toatl_Amt = (val1 * 9 / 100);
            //}
            //txt_sgst_amt.Text = Sgst_Toatl_Amt.ToString("##.00");

            //decimal Igst_Total_Amt;
            //if (string.IsNullOrEmpty(txt_total.Text))
            //{
            //    Igst_Total_Amt = 0;

            //}
            //else
            //{
            //    decimal val1 = Convert.ToDecimal(txt_total.Text);

            //    Igst_Total_Amt = (val1 * 0 / 100);
            //}
            //txt_igst_amt.Text = "0";//Igst_Total_Amt.ToString("##.00");

            decimal subTotal = Convert.ToDecimal(txt_total.Text);
            decimal GrossGrandTotal = subTotal;
            txt_grand_total.Text = GrossGrandTotal.ToString("##.00");
            hfTotal.Value = txt_grand_total.Text;

            string isNegative = "";
            try
            {
                //string number = hfTotal.Value;
                //number = Convert.ToDouble(number).ToString();

                //lbl_Amount_In_Word.Text = isNegative + ConvertToWords(number);

                string number = txt_grand_total.Text;
                number = Convert.ToDouble(number).ToString();

                lbl_Amount_In_Word.Text = isNegative + ConvertToWords(number);
            }
            catch (Exception)
            {
                throw;
            }
        }
        else
        {
            decimal val1 = Convert.ToDecimal(txt_round_off.Text);
            decimal val2 = Convert.ToDecimal(txt_grand_total.Text);
            Round_Off = (val2 - val1);
            txt_grand_total.Text = Round_Off.ToString("##.00");
            hfTotal.Value = txt_grand_total.Text;

            string isNegative = "";
            try
            {
                //string number = hfTotal.Value;
                //number = Convert.ToDouble(number).ToString();

                //lbl_Amount_In_Word.Text = isNegative + ConvertToWords(number);

                string number = txt_grand_total.Text;
                number = Convert.ToDouble(number).ToString();

                lbl_Amount_In_Word.Text = isNegative + ConvertToWords(number);
            }
            catch (Exception)
            {
                throw;
            }
        }
    }

    private void Save_Record()
    {
        con.Open();
        int id;
        string CretedBy = Session["adminname"].ToString();
        string Path = null;
        if (btn_save.Text == "Update")
        {
            SqlCommand Cmd = new SqlCommand("UPDATE CustomerPO_Hdr_Both SET Quotationno=@Quotationno,CustomerName=@CustomerName,SubCustomer=@SubCustomer,Pono=@Pono,PoDate=@PoDate,RefNo=@RefNo,Mobileno=@Mobileno,KindAtt=@KindAtt,ShippingAddress=@ShippingAddress,DeliveryAddress=@DeliveryAddress,GstNo=@GstNo,Cgst=@Cgst,Sgst=@Sgst,Igst=@Igst,AllTotalPrice=@AllTotalPrice,RoundOff=@RoundOff,GrandTotal=@GrandTotal,TotalInWord=@TotalInWord,Is_Deleted=@Is_Deleted,PayTerm=@PayTerm,Imagepath=@Imagepath,AgainstBy=@AgainstBy,Term_Condition_1=@Term_Condition_1,Term_Condition_2=@Term_Condition_2,Term_Condition_3=@Term_Condition_3,Term_Condition_4=@Term_Condition_4,Term_Condition_5=@Term_Condition_5,Term_Condition_6=@Term_Condition_6,statecode=@statecode,UpdatedBy=@UpdatedBy,UpdatedOn=@UpdatedOn WHERE Id='" + hdnID.Value + "'", con);
            Cmd.Parameters.AddWithValue("@Quotationno", ddlquotationno.SelectedItem.Text);
            Cmd.Parameters.AddWithValue("@CustomerName", txt_Customer_name.Text);
            Cmd.Parameters.AddWithValue("@SubCustomer", txtsubcust.Text);
            Cmd.Parameters.AddWithValue("@JobNo", txt_job_no.Text);
            Cmd.Parameters.AddWithValue("@Pono", txt_po_no.Text);
            Cmd.Parameters.AddWithValue("@PoDate", txt_po_date.Text);
            Cmd.Parameters.AddWithValue("@RefNo", txt_ref_no.Text);
            Cmd.Parameters.AddWithValue("@Mobileno", txt_mobile_no.Text);
            if (txt_kind_att.Text == "")
            {
                Cmd.Parameters.AddWithValue("@KindAtt", "NA");
            }
            else
            {
                Cmd.Parameters.AddWithValue("@KindAtt", txt_kind_att.SelectedItem.Text);
            }

            Cmd.Parameters.AddWithValue("@ShippingAddress", txtShippingAddr.Text);
            Cmd.Parameters.AddWithValue("@DeliveryAddress", txt_delivery_address.Text);
            Cmd.Parameters.AddWithValue("@Is_Deleted", '0');
            Cmd.Parameters.AddWithValue("@GstNo", txt_gst_no.Text);
            Cmd.Parameters.AddWithValue("@PayTerm", txt_pay_term.Text);
            Cmd.Parameters.AddWithValue("@statecode", txtstatecode.Text);
            Cmd.Parameters.AddWithValue("@Cgst", txt_cgst_amt.Text);
            Cmd.Parameters.AddWithValue("@Sgst", txt_sgst_amt.Text);
            Cmd.Parameters.AddWithValue("@Igst", txt_igst_amt.Text);
            Cmd.Parameters.AddWithValue("@AllTotalPrice", txt_total.Text);
            Cmd.Parameters.AddWithValue("@RoundOff", txt_round_off.Text);
            Cmd.Parameters.AddWithValue("@GrandTotal", txt_grand_total.Text);
            Cmd.Parameters.AddWithValue("@TotalInWord", lbl_Amount_In_Word.Text);
            Cmd.Parameters.AddWithValue("@Term_Condition_1", txt_term_1.Text + "-" + txt_condition_1.Text);
            Cmd.Parameters.AddWithValue("@Term_Condition_2", txt_term_2.Text + "-" + txt_condition_2.Text);
            Cmd.Parameters.AddWithValue("@Term_Condition_3", txt_term_3.Text + "-" + txt_condition_3.Text);
            Cmd.Parameters.AddWithValue("@Term_Condition_4", txt_term_4.Text + "-" + txt_condition_4.Text);
            Cmd.Parameters.AddWithValue("@Term_Condition_5", txt_term_5.Text + "-" + txt_condition_5.Text);
            Cmd.Parameters.AddWithValue("@Term_Condition_6", txt_term_6.Text + "-" + txt_condition_6.Text);
            Cmd.Parameters.AddWithValue("@ServiceType", ddlservicetype.SelectedItem.Text);
            Cmd.Parameters.AddWithValue("@AgainstBy", ddlagainstby.SelectedItem.Text);

            if (FileUpload.HasFile)
            {
                var Filenamenew = FileUpload.FileName;
                string codenew = Guid.NewGuid().ToString();
                Path = Server.MapPath("~/Attachpo/") + codenew + "_" + Filenamenew;
                FileUpload.SaveAs(Path);
                Cmd.Parameters.AddWithValue("@Imagepath", "~/Attachpo/" + codenew + "_" + Filenamenew);
            }
            else
            {
                Cmd.Parameters.AddWithValue("@Imagepath", lblPath.Text);
            }

            Cmd.Parameters.AddWithValue("@UpdatedBy", CretedBy);
            Cmd.Parameters.AddWithValue("@UpdatedOn", DateTime.Now);
            Cmd.ExecuteNonQuery();

            SqlCommand cmddelete = new SqlCommand("DELETE FROM CustomerPO_Dtls_Both WHERE PurchaseId=@PurchaseId", con);
            cmddelete.Parameters.AddWithValue("@PurchaseId", hdnID.Value);

            cmddelete.ExecuteNonQuery();

            foreach (GridViewRow g2 in gvPurchaseRecord.Rows)
            {
                Cmd.Parameters.AddWithValue("@Quotationno", ddlquotationno.SelectedItem.Text);
                //string JobNO = (g2.FindControl("txt_Jobno_grd") as Label).Text;
                string JobNO = (g2.FindControl("lblJob") as Label).Text;
                string Discription = (g2.FindControl("txt_discription_grd") as Label).Text;
                string HSN = (g2.FindControl("txt_hsn_grd") as Label).Text;
                string Tax = (g2.FindControl("lbl_tax_grd") as Label).Text;
                string Quntity = (g2.FindControl("lbl_quntity_grd") as Label).Text;
                string Unit = (g2.FindControl("txt_unit_grd") as Label).Text;
                string Rate = (g2.FindControl("lbl_rate_grd") as Label).Text;
                string Discount = (g2.FindControl("lbl_discount_grd") as Label).Text;
                string Total_Amount = (g2.FindControl("lbl_total_amount_grd") as Label).Text;
                string MateName = (g2.FindControl("lblproduct") as Label).Text;
                string PrintDescription = (g2.FindControl("lblprintdescription") as Label).Text;
                SqlCommand Cmd1 = new SqlCommand("INSERT INTO CustomerPO_Dtls_Both (PurchaseId,JobNO,Description,Hsn_Sac,TaxPercenteage,Quantity,Unit,Rate,DiscountPercentage,Total, PrintDescription, MateName,Quotationno) " +
                    "VALUES('" + hdnID.Value + "','" + JobNO + "','" + Discription + "','" + HSN + "','" + Tax + "','" + Quntity + "','" + Unit + "','" + Rate + "','" + Discount + "','" + Total_Amount + "','" + PrintDescription + "', '" + MateName + "', '" + ddlquotationno.SelectedItem.Text + "')", con);

                Cmd1.ExecuteNonQuery();
            }

            SqlDataAdapter Sda = new SqlDataAdapter("SELECT * FROM tblCustomerPOMail WHERE JobNo='" + txt_jobno.Text + "'", con);
            DataTable DTMAIL = new DataTable();
            Sda.Fill(DTMAIL);

            foreach (GridViewRow g1 in Grd_MAIL.Rows)
            {
                string MAIL = (g1.FindControl("lblmultMail") as Label).Text;
                string Designation = (g1.FindControl("lbldesignation") as Label).Text;
                SqlCommand cmdtable = new SqlCommand("UPDATE tblCustomerPOMail SET Email=@Email, UpdatedBy=@UpdatedBy, UpdatedOn=@UpdatedOn,pono=@pono,designation=@designation WHERE JobNo=@JobNo AND Email=@Email AND pono=@pono", con);
                //cmdtable.Parameters.AddWithValue("@JobNo", txt_job_no.Text);
                cmdtable.Parameters.AddWithValue("@Email", MAIL);
                cmdtable.Parameters.AddWithValue("@pono", txt_po_no.Text);
                cmdtable.Parameters.AddWithValue("@UpdatedBy", CretedBy);
                cmdtable.Parameters.AddWithValue("@UpdatedOn", DateTime.Today);
                cmdtable.Parameters.AddWithValue("@designation", Designation);
                cmdtable.ExecuteNonQuery();
            }
            ClientScript.RegisterStartupScript(this.GetType(), "alert", "HideLabel('Data Updated Sucessfully');", true);
        }

        else if(btn_save.Text == "Save")
        {
            try
            {
                SqlCommand Cmd = new SqlCommand("SP_CustomerPO_Both", con);
                Cmd.CommandType = CommandType.StoredProcedure;
                Cmd.Parameters.AddWithValue("@JobNo", txt_job_no.Text);
                Cmd.Parameters.AddWithValue("@Quotationno", ddlquotationno.SelectedItem.Text);
                Cmd.Parameters.AddWithValue("@CustomerName", txt_Customer_name.Text);
                Cmd.Parameters.AddWithValue("@SubCustomer", txtsubcust.Text);
                Cmd.Parameters.AddWithValue("@Pono", txt_po_no.Text);
                Cmd.Parameters.AddWithValue("@PoDate", txt_po_date.Text);
                Cmd.Parameters.AddWithValue("@RefNo", txt_ref_no.Text);
                Cmd.Parameters.AddWithValue("@Mobileno", txt_mobile_no.Text);
                if (txt_kind_att.Text == "")
                {
                    Cmd.Parameters.AddWithValue("@KindAtt", "NA");
                }
                else
                {
                    Cmd.Parameters.AddWithValue("@KindAtt", txt_kind_att.SelectedItem.Text);
                }
                Cmd.Parameters.AddWithValue("@ShippingAddress", txtShippingAddr.Text);
                Cmd.Parameters.AddWithValue("@DeliveryAddress", txt_delivery_address.Text);
                Cmd.Parameters.AddWithValue("@GstNo", txt_gst_no.Text);
                Cmd.Parameters.AddWithValue("@statecode", txtstatecode.Text);
                Cmd.Parameters.AddWithValue("@PayTerm", txt_pay_term.Text);
                Cmd.Parameters.AddWithValue("@Cgst", txt_cgst_amt.Text);
                Cmd.Parameters.AddWithValue("@Sgst", txt_sgst_amt.Text);
                Cmd.Parameters.AddWithValue("@Igst", txt_igst_amt.Text);
                Cmd.Parameters.AddWithValue("@AllTotalPrice", txt_total.Text);
                Cmd.Parameters.AddWithValue("@TotalInWord", lbl_Amount_In_Word.Text);
                Cmd.Parameters.AddWithValue("@RoundOff", txt_round_off.Text);
                Cmd.Parameters.AddWithValue("@GrandTotal", txt_grand_total.Text);
                Cmd.Parameters.AddWithValue("@Term_Condition_1", txt_term_1.Text + "-" + txt_condition_1.Text);
                Cmd.Parameters.AddWithValue("@Term_Condition_2", txt_term_2.Text + "-" + txt_condition_2.Text);
                Cmd.Parameters.AddWithValue("@Term_Condition_3", txt_term_3.Text + "-" + txt_condition_3.Text);
                Cmd.Parameters.AddWithValue("@Term_Condition_4", txt_term_4.Text + "-" + txt_condition_4.Text);
                Cmd.Parameters.AddWithValue("@Term_Condition_5", txt_term_5.Text + "-" + txt_condition_5.Text);
                Cmd.Parameters.AddWithValue("@Term_Condition_6", txt_term_6.Text + "-" + txt_condition_6.Text);
                Cmd.Parameters.AddWithValue("@ServiceType", ddlservicetype.SelectedItem.Text);
                Cmd.Parameters.AddWithValue("@AgainstBy", ddlagainstby.SelectedItem.Text);
                Cmd.Parameters.AddWithValue("@Type", ddltype.SelectedItem.Text);

                if (FileUpload.HasFile)
                {
                    var Filenamenew = FileUpload.FileName;
                    string codenew = Guid.NewGuid().ToString();
                    Path = Server.MapPath("~/Attachpo/") + codenew + "_" + Filenamenew;
                    FileUpload.SaveAs(Path);
                    Cmd.Parameters.AddWithValue("@Imagepath", "~/Attachpo/" + codenew + "_" + Filenamenew);
                }

                Cmd.Parameters.AddWithValue("@Is_Deleted", '0');
                Cmd.Parameters.AddWithValue("@CreatedBy", CretedBy);
                Cmd.Parameters.AddWithValue("@CreatedOn", DateTime.Now);
                Cmd.Parameters.Add("@purchase_id", SqlDbType.Int).Direction = ParameterDirection.Output;
                 Cmd.ExecuteNonQuery();

                id = Convert.ToInt32(Cmd.Parameters["@purchase_id"].Value);

                foreach (GridViewRow g1 in gvPurchaseRecord.Rows)
                {
                    string JobNO = (g1.FindControl("lblJob") as Label).Text;
                    string Discription = (g1.FindControl("txt_discription_grd") as Label).Text;
                    string HSN = (g1.FindControl("txt_hsn_grd") as Label).Text;
                    string Tax = (g1.FindControl("lbl_tax_grd") as Label).Text;
                    string Quntity = (g1.FindControl("lbl_quntity_grd") as Label).Text;
                    string Unit = (g1.FindControl("txt_unit_grd") as Label).Text;
                    string Rate = (g1.FindControl("lbl_rate_grd") as Label).Text;
                    string Discount = (g1.FindControl("lbl_discount_grd") as Label).Text;
                    string Total_Amount = (g1.FindControl("lbl_total_amount_grd") as Label).Text;
                    string MateName = (g1.FindControl("lblproduct") as Label).Text;
                    string PrintDescription = (g1.FindControl("lblprintdescription") as Label).Text;
                    Cmd.Parameters.AddWithValue("@Quotationno", ddlquotationno.SelectedItem.Text);

                    SqlCommand Cmd1 = new SqlCommand("INSERT INTO CustomerPO_Dtls_Both_Both (PurchaseId,Description,Hsn_Sac,TaxPercenteage,Quantity,Unit,Rate,DiscountPercentage,Total,JobNo,PrintDescription,MateName,Quotationno) " +
                        "VALUES('" + id + "','" + Discription + "','" + HSN + "','" + Tax + "','" + Quntity + "','" + Unit + "','" + Rate + "','" + Discount + "','" + Total_Amount + "','" + JobNO + "', '" + PrintDescription + "', '" + MateName + "','" + ddlquotationno.SelectedItem.Text + "')", con);

                    Cmd1.ExecuteNonQuery();
                }
                int JobNoCount = Convert.ToInt32(txtJobNoCount.Text);
                int JobNoCount1 = 1;
                foreach (GridViewRow g1 in quatationgrid.Rows)
                {
                    CheckBox chkSelect = g1.FindControl("chkSelect") as CheckBox;

                    if (chkSelect != null && chkSelect.Checked)
                    {
                        string JobCreatedCount = (g1.FindControl("LblJobNoss") as Label).Text;
                        string JobNo = (g1.FindControl("LblJobNo") as Label).Text;
                        string Discription = (g1.FindControl("txt_discription_grd") as Label).Text;
                        string HSN = (g1.FindControl("txt_hsn_grd") as Label).Text;
                        string Tax = (g1.FindControl("lbl_tax_grd") as Label).Text;
                        string Quntity = (g1.FindControl("lbl_quntity_grd") as Label).Text;
                        string Unit = (g1.FindControl("txt_unit_grd") as Label).Text;
                        string Rate = (g1.FindControl("lbl_rate_grd") as Label).Text;
                        string Discount = (g1.FindControl("lbl_discount_grd") as Label).Text;
                        string MateName = (g1.FindControl("lblproduct") as Label).Text;
                        string PrintDescription = (g1.FindControl("Lblprintdescription_grd") as Label).Text;
                        string Total_Amount = (g1.FindControl("lbl_total_amount_grd") as Label).Text;
                        Cmd.Parameters.AddWithValue("@Quotationno", ddlquotationno.SelectedItem.Text);

                        SqlCommand Cmd1 = new SqlCommand("INSERT INTO CustomerPO_Dtls_Both_Both (PurchaseId,Description,Hsn_Sac,TaxPercenteage,Quantity,Unit,Rate,DiscountPercentage,Total,JobNo,MateName,PrintDescription,Quotationno,JobStatus) " +
                             "VALUES('" + id + "','" + Discription + "','" + HSN + "','" + Tax + "','" + Quntity + "','" + Unit + "','" + Rate + "','" + Discount + "','" + Total_Amount + "','" + JobNo + "' ,'" + MateName + "' ,'" + PrintDescription + "','" + ddlquotationno.SelectedItem.Text + "','Pending')", con);
                        Cmd1.ExecuteNonQuery();
                                              
                        // Updating the job count for the Customer PO                         
                        SqlCommand cmdss = new SqlCommand("UPDATE CustomerPO_Hdr_Both_Both SET JobNoCount = '" + JobNoCount1 + "' WHERE id = '" + id + "'", con);
                        cmdss.ExecuteNonQuery();
                        ++JobNoCount1;


                        // Substract the Job count for that quotation 
                        -- JobNoCount;
                        SqlCommand cmds = new SqlCommand("UPDATE tbl_Quotation_two_Hdr SET JobNoCount = '" + JobNoCount + "' WHERE Quotation_no = '" + ddlquotationno.SelectedItem.Text + "'", con);
                        cmds.ExecuteNonQuery();
                        if(JobNoCount == 0)
                        {
                            SqlCommand cmds1 = new SqlCommand("UPDATE tbl_Quotation_two_Hdr SET Status = 'Completed' WHERE Quotation_no = '" + ddlquotationno.SelectedItem.Text + "'", con);
                            cmds1.ExecuteNonQuery();
                        }

                        SqlCommand Cmd2 = new SqlCommand("UPDATE tbl_Quotation_two_Dtls SET JobStatus = 'Completed', JobDaysCount = '" + JobCreatedCount + "'" +
                            "WHERE JobNo = '" + JobNo + "'", con);
                        Cmd2.ExecuteNonQuery();

                    }
                }
                foreach (GridViewRow g1 in Grd_MAIL.Rows)
                {
                    string MAIL = (g1.FindControl("lblmultMail") as Label).Text;
                    string Designation = (g1.FindControl("lbldesignation") as Label).Text;
                    SqlCommand cmdtable = new SqlCommand("insert into tblCustomerPOMail(QuotationNo,Email,CreatedBy,CreatedOn,pono,designation) values(@QuotationNo,@Email,@CreatedBy,@CreatedOn,@pono,@designation)", con);
                    //  cmdtable.Parameters.AddWithValue("@JobNo", txt_job_no.Text);   // new change 
                    cmdtable.Parameters.AddWithValue("@QuotationNo", ddlquotationno.SelectedItem.Text);   // new change 
                    cmdtable.Parameters.AddWithValue("@Email", MAIL);
                    cmdtable.Parameters.AddWithValue("@pono", txt_po_no.Text);
                    cmdtable.Parameters.AddWithValue("@CreatedBy", CretedBy);
                    cmdtable.Parameters.AddWithValue("@CreatedOn", DateTime.Now);
                    cmdtable.Parameters.AddWithValue("@designation", Designation);
                    cmdtable.ExecuteNonQuery();
                }
                ClientScript.RegisterStartupScript(this.GetType(), "alert", "HideLabel('Data Save Sucessfully');", true);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        else
        {
            try
            {
                SqlCommand Cmd = new SqlCommand("SP_CustomerPO_Both", con);
                Cmd.CommandType = CommandType.StoredProcedure;
                Cmd.Parameters.AddWithValue("@JobNo", txt_job_no.Text);
                Cmd.Parameters.AddWithValue("@Quotationno", ddlquotationno.SelectedItem.Text);
                Cmd.Parameters.AddWithValue("@CustomerName", txt_Customer_name.Text);
                Cmd.Parameters.AddWithValue("@SubCustomer", txtsubcust.Text);
                Cmd.Parameters.AddWithValue("@Pono", txt_po_no.Text);
                Cmd.Parameters.AddWithValue("@PoDate", txt_po_date.Text);
                Cmd.Parameters.AddWithValue("@RefNo", txt_ref_no.Text);
                Cmd.Parameters.AddWithValue("@Mobileno", txt_mobile_no.Text);
                if (txt_kind_att.Text == "")
                {
                    Cmd.Parameters.AddWithValue("@KindAtt", "NA");
                }
                else
                {
                    Cmd.Parameters.AddWithValue("@KindAtt", txt_kind_att.SelectedItem.Text);
                }
                Cmd.Parameters.AddWithValue("@ShippingAddress", txtShippingAddr.Text);
                Cmd.Parameters.AddWithValue("@DeliveryAddress", txt_delivery_address.Text);
                Cmd.Parameters.AddWithValue("@GstNo", txt_gst_no.Text);
                Cmd.Parameters.AddWithValue("@statecode", txtstatecode.Text);
                Cmd.Parameters.AddWithValue("@PayTerm", txt_pay_term.Text);
                Cmd.Parameters.AddWithValue("@Cgst", txt_cgst_amt.Text);
                Cmd.Parameters.AddWithValue("@Sgst", txt_sgst_amt.Text);
                Cmd.Parameters.AddWithValue("@Igst", txt_igst_amt.Text);
                Cmd.Parameters.AddWithValue("@AllTotalPrice", txt_total.Text);
                Cmd.Parameters.AddWithValue("@TotalInWord", lbl_Amount_In_Word.Text);
                Cmd.Parameters.AddWithValue("@RoundOff", txt_round_off.Text);
                Cmd.Parameters.AddWithValue("@GrandTotal", txt_grand_total.Text);
                Cmd.Parameters.AddWithValue("@Term_Condition_1", txt_term_1.Text + "-" + txt_condition_1.Text);
                Cmd.Parameters.AddWithValue("@Term_Condition_2", txt_term_2.Text + "-" + txt_condition_2.Text);
                Cmd.Parameters.AddWithValue("@Term_Condition_3", txt_term_3.Text + "-" + txt_condition_3.Text);
                Cmd.Parameters.AddWithValue("@Term_Condition_4", txt_term_4.Text + "-" + txt_condition_4.Text);
                Cmd.Parameters.AddWithValue("@Term_Condition_5", txt_term_5.Text + "-" + txt_condition_5.Text);
                Cmd.Parameters.AddWithValue("@Term_Condition_6", txt_term_6.Text + "-" + txt_condition_6.Text);
                Cmd.Parameters.AddWithValue("@ServiceType", ddlservicetype.SelectedItem.Text);
                Cmd.Parameters.AddWithValue("@AgainstBy", ddlagainstby.SelectedItem.Text);
                Cmd.Parameters.AddWithValue("@Type", ddlagainstby.SelectedItem.Text);

                if (FileUpload.HasFile)
                {
                    var Filenamenew = FileUpload.FileName;
                    string codenew = Guid.NewGuid().ToString();
                    Path = Server.MapPath("~/Attachpo/") + codenew + "_" + Filenamenew;
                    FileUpload.SaveAs(Path);
                    Cmd.Parameters.AddWithValue("@Imagepath", "~/Attachpo/" + codenew + "_" + Filenamenew);
                }

                Cmd.Parameters.AddWithValue("@Is_Deleted", '0');
                Cmd.Parameters.AddWithValue("@CreatedBy", CretedBy);
                Cmd.Parameters.AddWithValue("@CreatedOn", DateTime.Now);
                Cmd.Parameters.Add("@purchase_id", SqlDbType.Int).Direction = ParameterDirection.Output;
                Cmd.ExecuteNonQuery();

                id = Convert.ToInt32(Cmd.Parameters["@purchase_id"].Value);

                foreach (GridViewRow g1 in gvPurchaseRecord.Rows)
                {
                    string JobNO = (g1.FindControl("lblJob") as Label).Text;
                    string Discription = (g1.FindControl("txt_discription_grd") as Label).Text;
                    string HSN = (g1.FindControl("txt_hsn_grd") as Label).Text;
                    string Tax = (g1.FindControl("lbl_tax_grd") as Label).Text;
                    string Quntity = (g1.FindControl("lbl_quntity_grd") as Label).Text;
                    string Unit = (g1.FindControl("txt_unit_grd") as Label).Text;
                    string Rate = (g1.FindControl("lbl_rate_grd") as Label).Text;
                    string Discount = (g1.FindControl("lbl_discount_grd") as Label).Text;
                    string Total_Amount = (g1.FindControl("lbl_total_amount_grd") as Label).Text;
                    string MateName = (g1.FindControl("lblproduct") as Label).Text;
                    string PrintDescription = (g1.FindControl("lblprintdescription") as Label).Text;
                    Cmd.Parameters.AddWithValue("@Quotationno", ddlquotationno.SelectedItem.Text);

                    SqlCommand Cmd1 = new SqlCommand("INSERT INTO CustomerPO_Dtls_Both_Both (PurchaseId,Description,Hsn_Sac,TaxPercenteage,Quantity,Unit,Rate,DiscountPercentage,Total,JobNo,PrintDescription,MateName,Quotationno) " +
                        "VALUES('" + id + "','" + Discription + "','" + HSN + "','" + Tax + "','" + Quntity + "','" + Unit + "','" + Rate + "','" + Discount + "','" + Total_Amount + "','" + JobNO + "', '" + PrintDescription + "', '" + MateName + "','" + ddlquotationno.SelectedItem.Text + "')", con);

                   Cmd1.ExecuteNonQuery();
                }
                foreach (GridViewRow g1 in quatationgrid.Rows)
                {
                    string JobNo = (g1.FindControl("LblJobNo") as Label).Text;
                    string Discription = (g1.FindControl("txt_discription_grd") as Label).Text;
                    string HSN = (g1.FindControl("txt_hsn_grd") as Label).Text;
                    string Tax = (g1.FindControl("lbl_tax_grd") as Label).Text;
                    string Quntity = (g1.FindControl("lbl_quntity_grd") as Label).Text;
                    string Unit = (g1.FindControl("txt_unit_grd") as Label).Text;
                    string Rate = (g1.FindControl("lbl_rate_grd") as Label).Text;
                    string Discount = (g1.FindControl("lbl_discount_grd") as Label).Text;
                    string MateName = (g1.FindControl("lblproduct") as Label).Text;
                    string PrintDescription = (g1.FindControl("Lblprintdescription_grd") as Label).Text;
                    string Total_Amount = (g1.FindControl("lbl_total_amount_grd") as Label).Text;
                    Cmd.Parameters.AddWithValue("@Quotationno", ddlquotationno.SelectedItem.Text);

                    SqlCommand Cmd1 = new SqlCommand("INSERT INTO CustomerPO_Dtls_Both_Both (PurchaseId,Description,Hsn_Sac,TaxPercenteage,Quantity,Unit,Rate,DiscountPercentage,Total,JobNo,MateName,PrintDescription,Quotationno) " +
                         "VALUES('" + id + "','" + Discription + "','" + HSN + "','" + Tax + "','" + Quntity + "','" + Unit + "','" + Rate + "','" + Discount + "','" + Total_Amount + "','" + JobNo + "' ,'" + MateName + "' ,'" + PrintDescription + "','" + ddlquotationno.SelectedItem.Text + "')", con);
                   Cmd1.ExecuteNonQuery();
                }
                foreach (GridViewRow g1 in Grd_MAIL.Rows)
                {
                    string MAIL = (g1.FindControl("lblmultMail") as Label).Text;
                    string Designation = (g1.FindControl("lbldesignation") as Label).Text;
                    SqlCommand cmdtable = new SqlCommand("insert into tblCustomerPOMail(QuotationNo,Email,CreatedBy,CreatedOn,pono,designation) values(@QuotationNo,@Email,@CreatedBy,@CreatedOn,@pono,@designation)", con);
                    //  cmdtable.Parameters.AddWithValue("@JobNo", txt_job_no.Text);   // new change 
                    cmdtable.Parameters.AddWithValue("@QuotationNo", ddlquotationno.SelectedItem.Text);   // new change 
                    cmdtable.Parameters.AddWithValue("@Email", MAIL);
                    cmdtable.Parameters.AddWithValue("@pono", txt_po_no.Text);
                    cmdtable.Parameters.AddWithValue("@CreatedBy", CretedBy);
                    cmdtable.Parameters.AddWithValue("@CreatedOn", DateTime.Now);
                    cmdtable.Parameters.AddWithValue("@designation", Designation);
                    cmdtable.ExecuteNonQuery();
                }
                ClientScript.RegisterStartupScript(this.GetType(), "alert", "HideLabel('Data Save Sucessfully');", true);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        
    }

    protected void btn_save_Click(object sender, EventArgs e)
    {
        Save_Record();
    }

    protected void btnCancel_Click(object sender, EventArgs e)
    {
        if (Request.QueryString["Pono"] != null)
        {
            Response.Redirect("CustomerPO_Report.aspx");
        }
        else
        {
            Response.Redirect("CustomerPO_List.aspx");
        }

    }

    [System.Web.Script.Services.ScriptMethod()]
    [System.Web.Services.WebMethod]
    public static List<string> GetDescriptionList(string prefixText, int count)
    {
        return AutoFillDescriptionlist(prefixText);
    }

    public static List<string> AutoFillDescriptionlist(string prefixText)
    {
        using (SqlConnection con = new SqlConnection())
        {
            con.ConnectionString = ConfigurationManager.ConnectionStrings["connectionString"].ConnectionString;

            using (SqlCommand com = new SqlCommand())
            {
                com.CommandText = "select DISTINCT CompName from tblComponent where " + "CompName like @Search + '%' AND isdeleted='0'";

                com.Parameters.AddWithValue("@Search", prefixText);
                com.Connection = con;
                con.Open();
                List<string> CompName = new List<string>();
                using (SqlDataReader sdr = com.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        CompName.Add(sdr["CompName"].ToString());
                    }
                }
                con.Close();
                return CompName;
            }
        }
    }

    protected void txt_discription_TextChanged(object sender, EventArgs e)
    {
        SqlDataAdapter Da = new SqlDataAdapter("SELECT * FROM tblComponent WHERE CompName='" + txt_discription.Text + "'", con);
        DataTable Dt = new DataTable();
        Da.Fill(Dt);
        if (Dt.Rows.Count > 0)
        {
            txt_total_amount.Text = "0";
            txt_discount.Text = "0";

            txt_hsn.Text = Dt.Rows[0]["HSN"].ToString();
            txt_rate.Text = Dt.Rows[0]["Rate"].ToString();
            txt_unit.Text = Dt.Rows[0]["Units"].ToString();
            txt_tax.Text = Dt.Rows[0]["Tax"].ToString();
        }
        txt_printdescription.Text = txt_discription.Text;
    }

    //Job No Text Change
    protected void txt_job_no_TextChanged(object sender, EventArgs e)
    {
        SqlDataAdapter Da = new SqlDataAdapter("SELECT Customer_Name FROM tbl_Quotation_two_Hdr WHERE Customer_Name ='" + txt_Customer_name.Text + "' AND isCompleted='1'  AND IsDeleted='0'", con);
        DataTable Dt = new DataTable();
        Da.Fill(Dt);
        if (Dt.Rows.Count > 0)
        {
            txt_Customer_name.Text = Dt.Rows[0]["Customer_Name"].ToString();
        }
        //customer namewise information show
        DataTable Dtt = new DataTable();
        SqlDataAdapter Daa = new SqlDataAdapter("SELECT * FROM tblCustomer WHERE CustomerName='" + txt_Customer_name.Text + "'", con);
        Daa.Fill(Dtt);
        if (Dt.Rows.Count > 0)
        {
            txt_delivery_address.Text = Dtt.Rows[0]["AddresLine1"].ToString();
            txt_gst_no.Text = Dtt.Rows[0]["GSTNo"].ToString();
            txtstatecode.Text = Dtt.Rows[0]["StateCode"].ToString();
            txt_mobile_no.Text = Dtt.Rows[0]["MobNo"].ToString();
            //  txt_kind_att.Text = Dtt.Rows[0]["ContactPerName1"].ToString();
        }
        //contact person list bind
        DataTable dt1 = new DataTable();
        SqlDataAdapter sad1 = new SqlDataAdapter("select * from tblCustomerContactPerson where CustName='" + txt_Customer_name.Text + "'", con);
        sad1.Fill(dt1);
        txt_kind_att.DataTextField = "ContactPerName";

        txt_kind_att.DataSource = dt1;
        txt_kind_att.DataBind();
        ///Email bind
        DataTable dt2 = new DataTable();
        SqlDataAdapter sad2 = new SqlDataAdapter("select * from tblCustomerContactPerson where CustName='" + txt_Customer_name.Text + "'", con);
        sad2.Fill(dt2);
        Grd_MAIL.DataSource = dt2;
        Grd_MAIL.DataBind();
        Grd_MAIL.EmptyDataText = "Record Not Found";

        ////Automatic description bind in job number from quaation details table
        DataTable dt3 = new DataTable();
        SqlDataAdapter sad3 = new SqlDataAdapter("select * from vw_Quot_pdf where JobNo='" + txt_jobno.Text + "'", con);  // new change job no
        sad3.Fill(dt3);
        int count = 1;
        if (dt3.Rows.Count > 0)
        {
            ViewState["RowNo"] = 0;
            Dt_Itemsdetails.Columns.AddRange(new DataColumn[10] { new DataColumn("Id"),
                new DataColumn("JobNo"),  new DataColumn("CompName"),
                new DataColumn("HSN"), new DataColumn("Rate"),
                new DataColumn("Units"), new DataColumn("Qty"),
                new DataColumn("Tax"), new DataColumn("Disc_per"),new DataColumn("total")
              });

            ViewState["Customerdetails"] = Dt_Itemsdetails;
            for (int i = 0; i < dt3.Rows.Count; i++)
            {

                // Dt_Itemsdetails.Columns.AddRange(new DataColumn[10] { new DataColumn("Id"), new DataColumn("JobNo"), new DataColumn("CompName"), new DataColumn("HSN"), new DataColumn("Rate"), new DataColumn("Units"), new DataColumn("Qty"), new DataColumn("Tax"), new DataColumn("Disc_per"), new DataColumn("FTotal") });

                Dt_Itemsdetails.Rows.Add(count, dt3.Rows[i]["JobNo"].ToString(), dt3.Rows[i]["CompName"].ToString(), dt3.Rows[i]["HSN"].ToString(), dt3.Rows[i]["Rate"].ToString(), dt3.Rows[i]["Units"].ToString(), dt3.Rows[i]["Qty"].ToString(), dt3.Rows[i]["Tax"].ToString(), dt3.Rows[i]["Disc_per"].ToString(), dt3.Rows[i]["total"].ToString());

                count = count + 1;
            }
            quatationgrid.DataSource = Dt_Itemsdetails;
            quatationgrid.DataBind();
            quatationgrid.EmptyDataText = "Not Records Found";
        }
    }

    protected void lnkbtnDelete_Click(object sender, EventArgs e)
    {
        GridViewRow row = (sender as LinkButton).NamingContainer as GridViewRow;

        DataTable dt = ViewState["Customerdetails"] as DataTable;
        dt.Rows.Remove(dt.Rows[row.RowIndex]);
        ViewState["Invoicedetails"] = dt;
        quatationgrid.DataSource = (DataTable)ViewState["Customerdetails"];
        quatationgrid.DataBind();
        ScriptManager.RegisterStartupScript(this, this.GetType(), "Alert", "alert('Data Delete Succesfully !!!');", true);
        ScriptManager.RegisterStartupScript(this, this.GetType(), "Success", "scrollToElement();", true);
    }
    private decimal TTotal;

    protected void check_address_CheckedChanged(object sender, EventArgs e)
    {
        if (check_addresss.Checked == true)
        {
            txtShippingAddr.Text = txt_delivery_address.Text;
        }
    }

    protected void txt_Customer_name_TextChanged(object sender, EventArgs e)
    {

        ddlQuotationno();

        SqlDataAdapter Da = new SqlDataAdapter("SELECT Customer_Name FROM tbl_Quotation_two_Hdr WHERE Customer_Name='" + txt_Customer_name.Text + "' AND isCompleted='1'  AND IsDeleted='0'", con);
        DataTable Dt = new DataTable();
        Da.Fill(Dt);
        if (Dt.Rows.Count > 0)
        {
            txt_Customer_name.Text = Dt.Rows[0]["Customer_Name"].ToString();
        }
        //customer namewise information show
        DataTable Dtt = new DataTable();
        SqlDataAdapter Daa = new SqlDataAdapter("SELECT * FROM tblCustomer WHERE CustomerName='" + txt_Customer_name.Text + "'", con);
        Daa.Fill(Dtt);
        if (Dtt.Rows.Count > 0)
        {
            txt_delivery_address.Text = Dtt.Rows[0]["AddresLine1"].ToString();
            txt_gst_no.Text = Dtt.Rows[0]["GSTNo"].ToString();
            txtstatecode.Text = Dtt.Rows[0]["StateCode"].ToString();

            txt_mobile_no.Text = Dtt.Rows[0]["MobNo"].ToString();
            //txt_kind_att.Text = Dtt.Rows[0]["ContactPerName1"].ToString();
        }
        //contact person list bind
        DataTable dt1 = new DataTable();
        SqlDataAdapter sad1 = new SqlDataAdapter("select * from tblCustomerContactPerson where CustName='" + txt_Customer_name.Text + "'", con);
        sad1.Fill(dt1);
        txt_kind_att.DataTextField = "ContactPerName";

        txt_kind_att.DataSource = dt1;
        txt_kind_att.DataBind();
        ///Email bind
        DataTable dt2 = new DataTable();
        SqlDataAdapter sad2 = new SqlDataAdapter("select * from tblCustomerContactPerson where CustName='" + txt_Customer_name.Text + "'", con);
        sad2.Fill(dt2);
        Grd_MAIL.DataSource = dt2;
        Grd_MAIL.DataBind();
        Grd_MAIL.EmptyDataText = "Record Not Found";
        //GetJobNO();
        ////Automatic description bind in job number from quaation details table
        DataTable dt3 = new DataTable();
        SqlDataAdapter sad3 = new SqlDataAdapter("select * from vw_Quot_pdf where JobNo='" + txt_jobno.Text + "'", con);  // new change job no 
        sad3.Fill(dt3);
        int count = 1;
        if (dt3.Rows.Count > 0)
        {
            ViewState["RowNo"] = 0;
            Dt_Itemsdetails.Columns.AddRange(new DataColumn[9] { new DataColumn("Id"),
                new DataColumn("CompName"),  new DataColumn("HSN"),
                  new DataColumn("Rate"), new DataColumn("Units"),
                  new DataColumn("Qty"), new DataColumn("Tax"),
                new DataColumn("Disc_per"), new DataColumn("total")
              });

            ViewState["Customerdetails"] = Dt_Itemsdetails;
            for (int i = 0; i < dt3.Rows.Count; i++)
            {
                Dt_Itemsdetails.Rows.Add(count, dt3.Rows[i]["CompName"].ToString(), dt3.Rows[i]["HSN"].ToString(), dt3.Rows[i]["Rate"].ToString(), dt3.Rows[i]["Units"].ToString(), dt3.Rows[i]["Qty"].ToString(), dt3.Rows[i]["Tax"].ToString(), dt3.Rows[i]["Disc_per"].ToString(), dt3.Rows[i]["total"].ToString());

                count = count + 1;
            }
            quatationgrid.DataSource = Dt_Itemsdetails;
            quatationgrid.DataBind();
            quatationgrid.EmptyDataText = "Not Records Found";

        }
        GetJobNO();
    }

    //protected void txtinvno_TextChanged(object sender, EventArgs e)
    //{
    //    SqlDataAdapter Da = new SqlDataAdapter("SELECT Customer_Name FROM tbl_Quotation_two_Hdr WHERE Customer_Name ='" + txt_Customer_name.Text + "' AND isCompleted='1'  AND IsDeleted='0'", con);
    //    DataTable Dt = new DataTable();
    //    Da.Fill(Dt);
    //    if (Dt.Rows.Count > 0)
    //    {
    //        txt_Customer_name.Text = Dt.Rows[0]["Customer_Name"].ToString();
    //    }
    //    //customer namewise information show
    //    DataTable Dtt = new DataTable();
    //    SqlDataAdapter Daa = new SqlDataAdapter("SELECT * FROM tblCustomer WHERE CustomerName='" + txt_Customer_name.Text + "'", con);
    //    Daa.Fill(Dtt);
    //    if (Dt.Rows.Count > 0)
    //    {
    //        txt_delivery_address.Text = Dtt.Rows[0]["AddresLine1"].ToString();
    //        txt_gst_no.Text = Dtt.Rows[0]["GSTNo"].ToString();
    //        txtstatecode.Text = Dtt.Rows[0]["StateCode"].ToString();
    //        txt_mobile_no.Text = Dtt.Rows[0]["MobNo"].ToString();
    //        //txt_kind_att.Text = Dtt.Rows[0]["ContactPerName1"].ToString();
    //    }
    //    //contact person list bind
    //    DataTable dt1 = new DataTable();
    //    SqlDataAdapter sad1 = new SqlDataAdapter("select * from tblCustomerContactPerson where CustName='" + txt_Customer_name.Text + "'", con);
    //    sad1.Fill(dt1);
    //    txt_kind_att.DataTextField = "ContactPerName";

    //    txt_kind_att.DataSource = dt1;
    //    txt_kind_att.DataBind();
    //    ///Email bind
    //    DataTable dt2 = new DataTable();
    //    SqlDataAdapter sad2 = new SqlDataAdapter("select * from tblCustomerContactPerson where CustName='" + txt_Customer_name.Text + "'", con);
    //    sad2.Fill(dt2);
    //    Grd_MAIL.DataSource = dt2;
    //    Grd_MAIL.DataBind();
    //    Grd_MAIL.EmptyDataText = "Record Not Found";

    //    ////Automatic description bind in job number from quaation details table
    //    DataTable dt3 = new DataTable();
    //    //SqlDataAdapter sad3 = new SqlDataAdapter("select * from vw_Quot_pdf where JobNo='" + txt_job_no.Text + "'", con);
    //    SqlDataAdapter sad3 = new SqlDataAdapter("select * from [tbl_Quotation_two_Dtls] where Quotation_no='" + txtinvno.Text + "'", con);
    //    sad3.Fill(dt3);
    //    int count = 1;
    //    if (dt3.Rows.Count > 0)
    //    {
    //        ViewState["RowNo"] = 0;
    //        Dt_Itemsdetails.Columns.AddRange(new DataColumn[9] { new DataColumn("Id"),
    //            new DataColumn("CompName"),  new DataColumn("HSN"),
    //            new DataColumn("Tax"), new DataColumn("Qty"),
    //            new DataColumn("Units"), new DataColumn("Rate"),
    //            new DataColumn("Disc_per"), new DataColumn("FTotal")
    //          });

    //        ViewState["Customerdetails"] = Dt_Itemsdetails;
    //        for (int i = 0; i < dt3.Rows.Count; i++)
    //        {
    //            Dt_Itemsdetails.Rows.Add(count, dt3.Rows[i]["JobNo"].ToString(), dt3.Rows[i]["CompName"].ToString(), dt3.Rows[i]["HSN"].ToString(), dt3.Rows[i]["Tax"].ToString(), dt3.Rows[i]["Qty"].ToString(), dt3.Rows[i]["Units"].ToString(), dt3.Rows[i]["Rate"].ToString(), dt3.Rows[i]["Disc_per"].ToString(), dt3.Rows[i]["FTotal"].ToString());

    //            count = count + 1;
    //        }
    //        quatationgrid.DataSource = Dt_Itemsdetails;
    //        quatationgrid.DataBind();
    //        quatationgrid.EmptyDataText = "Not Records Found";
    //    }
    //}

    protected void ddlquotationno_TextChanged(object sender, EventArgs e)
    {
        SqlDataAdapter Da = new SqlDataAdapter("SELECT * FROM tbl_Quotation_two_Hdr WHERE Customer_Name ='" + txt_Customer_name.Text + "' AND isCompleted='1'  AND IsDeleted='0'", con);
        DataTable Dt = new DataTable();
        Da.Fill(Dt);
        if (Dt.Rows.Count > 0)
        {
            txt_Customer_name.Text = Dt.Rows[0]["Customer_Name"].ToString();
            txtsubcust.Text = Dt.Rows[0]["SubCustomer"].ToString();
            //txtsubcust.Text = Dt.Rows[0]["Term_Condition_1"].ToString();
            //txtsubcust.Text = Dt.Rows[0]["Term_Condition_2"].ToString();
            //txtsubcust.Text = Dt.Rows[0]["Term_Condition_3"].ToString();
            //txtsubcust.Text = Dt.Rows[0]["Term_Condition_4"].ToString();
        }
        //customer namewise information show
        DataTable Dtt = new DataTable();
        SqlDataAdapter Daa = new SqlDataAdapter("SELECT * FROM tblCustomer WHERE CustomerName='" + txt_Customer_name.Text + "'", con);
        Daa.Fill(Dtt);
        if (Dt.Rows.Count > 0)
        {
            txt_delivery_address.Text = Dtt.Rows[0]["AddresLine1"].ToString();
            txt_gst_no.Text = Dtt.Rows[0]["GSTNo"].ToString();
            txtstatecode.Text = Dtt.Rows[0]["StateCode"].ToString();
            txt_mobile_no.Text = Dtt.Rows[0]["MobNo"].ToString();
            //txt_kind_att.Text = Dtt.Rows[0]["ContactPerName1"].ToString();
        }
        //contact person list bind
        DataTable dt1 = new DataTable();
        SqlDataAdapter sad1 = new SqlDataAdapter("select * from tblCustomerContactPerson where CustName='" + txt_Customer_name.Text + "'", con);
        sad1.Fill(dt1);
        txt_kind_att.DataTextField = "ContactPerName";

        txt_kind_att.DataSource = dt1;
        txt_kind_att.DataBind();
        ///Email bind
        DataTable dt2 = new DataTable();
        SqlDataAdapter sad2 = new SqlDataAdapter("select * from tblCustomerContactPerson where CustName='" + txt_Customer_name.Text + "'", con);
        sad2.Fill(dt2);
        Grd_MAIL.DataSource = dt2;
        Grd_MAIL.DataBind();
        Grd_MAIL.EmptyDataText = "Record Not Found";

        ////Automatic description bind in job number from quaation details table
        DataTable dt3 = new DataTable();
        //SqlDataAdapter sad3 = new SqlDataAdapter("select * from vw_Quot_pdf where JobNo='" + txt_job_no.Text + "'", con);
        //SqlDataAdapter sad3 = new SqlDataAdapter("select * from [tbl_Quotation_two_Dtls] where Quotation_no='" + ddlquotationno.SelectedItem.Text + "'", con);
        SqlDataAdapter sad3 = new SqlDataAdapter("select  product as MateName ,  Description As PrintDescription, * from [tbl_Quotation_two_Dtls] where Quotation_no='" + ddlquotationno.SelectedItem.Text + "'", con);
        sad3.Fill(dt3);
        int count = 1;
        if (dt3.Rows.Count > 0)
        {
            
            

            ViewState["RowNo"] = 0;
            Dt_Itemsdetails.Columns.AddRange(new DataColumn[12] { new DataColumn("Id"),new DataColumn("JobNo"), new DataColumn("MateName"),
                    new DataColumn("CompName"),  new DataColumn("PrintDescription"), new DataColumn("HSN"),
                    new DataColumn("Rate"),  new DataColumn("Units"),
                    new DataColumn("Qty"),  new DataColumn("Tax"),
                    new DataColumn("Disc_per"), new DataColumn("total")

                  });
            Dt_Itemsdetails.Columns.Add("DaysSinceCreated", typeof(int));
            ViewState["Customerdetails"] = Dt_Itemsdetails;
            for (int i = 0; i < dt3.Rows.Count; i++)
            {
                // Dt_Itemsdetails.Columns.AddRange(new DataColumn[10] { new DataColumn("Id"), new DataColumn("JobNo"), new DataColumn("CompName"), new DataColumn("HSN"), new DataColumn("Rate"), new DataColumn("Units"), new DataColumn("Qty"), new DataColumn("Tax"), new DataColumn("Disc_per"), new DataColumn("FTotal") });    

                // Dt_Itemsdetails.Rows.Add(count,  dt3.Rows[i]["JobNo"].ToString(), dt3.Rows[i]["CompName"].ToString(), dt3.Rows[i]["HSN"].ToString(), dt3.Rows[i]["Rate"].ToString(), dt3.Rows[i]["Units"].ToString(), dt3.Rows[i]["Qty"].ToString(), dt3.Rows[i]["Tax"].ToString(), dt3.Rows[i]["Disc_per"].ToString(), dt3.Rows[i]["total"].ToString());
                Dt_Itemsdetails.Rows.Add(count, dt3.Rows[i]["JobNo"].ToString(), dt3.Rows[i]["MateName"].ToString(), dt3.Rows[i]["CompName"].ToString(), dt3.Rows[i]["PrintDescription"].ToString(), dt3.Rows[i]["HSN"].ToString(), dt3.Rows[i]["Rate"].ToString(), dt3.Rows[i]["Units"].ToString(), dt3.Rows[i]["Qty"].ToString(), dt3.Rows[i]["Tax"].ToString(), dt3.Rows[i]["Disc_per"].ToString(), dt3.Rows[i]["total"].ToString());

                count = count + 1;
            }
            quatationgrid.DataSource = Dt_Itemsdetails;
            quatationgrid.DataBind();
            quatationgrid.EmptyDataText = "Not Records Found"; //9975468880         
        }
    }

    protected void quatationgrid_RowEditing(object sender, GridViewEditEventArgs e)
    {
        quatationgrid.EditIndex = e.NewEditIndex;
        quatationgrid.DataSource = (DataTable)ViewState["Customerdetails"];
        quatationgrid.DataBind();
        ScriptManager.RegisterStartupScript(this, this.GetType(), "Success", "scrollToElement();", true);
    }

    protected void txt_rate_grdQ_TextChanged(object sender, EventArgs e)
    {
        GridViewRow row = (sender as TextBox).NamingContainer as GridViewRow;
        Grid_Calculation(row);
    }

    protected void gv_Qupdate_Click(object sender, EventArgs e)
    {
        GridViewRow row = (sender as LinkButton).NamingContainer as GridViewRow;

        string JobNo = ((TextBox)row.FindControl("txt_Jobno_grd")).Text;
        string Description = ((TextBox)row.FindControl("txt_discription_grddd")).Text;
        string HSN = ((TextBox)row.FindControl("txt_hsn_grd")).Text;
        string Tax = ((TextBox)row.FindControl("txt_tax_quogrd")).Text;
        string Quntity = ((TextBox)row.FindControl("txt_quntity_Quogrd")).Text;
        string Rate = ((TextBox)row.FindControl("txt_rate_Quogrd")).Text;
        string Unit = ((TextBox)row.FindControl("txt_unit_grd")).Text;
        string Disc_per = ((TextBox)row.FindControl("txt_discount_Quogrd")).Text;
        string FTotal = ((TextBox)row.FindControl("txt_total_amount_Quogrd")).Text;

        DataTable Dt = ViewState["Customerdetails"] as DataTable;

        Dt.Rows[row.RowIndex]["JobNo"] = JobNo;
        Dt.Rows[row.RowIndex]["CompName"] = Description;
        Dt.Rows[row.RowIndex]["HSN"] = HSN;
        Dt.Rows[row.RowIndex]["Tax"] = Tax;
        Dt.Rows[row.RowIndex]["Qty"] = Quntity;
        Dt.Rows[row.RowIndex]["Rate"] = Rate;
        Dt.Rows[row.RowIndex]["Units"] = Unit;
        Dt.Rows[row.RowIndex]["Disc_per"] = Disc_per;
        Dt.Rows[row.RowIndex]["total"] = FTotal;

        Dt.AcceptChanges();

        ViewState["Customerdetails"] = Dt;
        quatationgrid.EditIndex = -1;

        quatationgrid.DataSource = (DataTable)ViewState["Customerdetails"];
        quatationgrid.DataBind();

        //decimal grd_total;
        //if (!string.IsNullOrEmpty(txt_total_amount.Text))
        //{
        //    grd_total = 0;
        //}
        //else
        //{
        //    decimal val1 = Convert.ToDecimal(txt_total.Text);
        //    //decimal val2 = Convert.ToDecimal(txt_sgst_amt.Text);
        //    //decimal val3 = Convert.ToDecimal(txt_cgst_amt.Text);
        //    //decimal val4 = Convert.ToDecimal(txt_igst_amt.Text);
        //    //decimal val5 = Convert.ToDecimal(txt_round_off.Text);

        //    grd_total = (val1);

        //    //var grd = grd_total - val5;
        //}
        //txt_grand_total.Text = grd_total.ToString();
        //hfTotal.Value = txt_grand_total.Text;

        //string isNegative = "";
        //try
        //{
        //    //string number = hfTotal.Value;
        //    //number = Convert.ToDouble(number).ToString();

        //    //lbl_Amount_In_Word.Text = isNegative + ConvertToWords(number);


        //    string number = txt_grand_total.Text;
        //    number = Convert.ToDouble(number).ToString();

        //    lbl_Amount_In_Word.Text = isNegative + ConvertToWords(number);
        //}
        //catch (Exception)
        //{

        //    throw;
        //}
        //if (hdnPoProductTot.Value != "")
        //{
        //    decimal totaltax = 0, totalgrdtax = 0;
        //    decimal Total11177 = 0, Qty = 0, rate111111 = 0, totalrateqty = 0;
        //    foreach (GridViewRow g1 in gvPurchaseRecord.Rows)
        //    {
        //        string lbltotaltax = (g1.FindControl("lbl_tax_grd") as Label).Text;
        //        string lblrate = (g1.FindControl("lbl_rate_grd") as Label).Text;
        //        string lblqty = (g1.FindControl("lbl_quntity_grd") as Label).Text;
        //        totaltax = Convert.ToDecimal(lbltotaltax);

        //        rate111111 = Convert.ToDecimal(lblrate);
        //        Qty = Convert.ToDecimal(lblqty);
        //        Total11177 = ((Qty * rate111111) * totaltax) / 100;
        //        totalrateqty += Total11177;
        //    }
        //    totalgrdtax = totalrateqty + Convert.ToDecimal(taxhidden.Value);
        //    if (txtstatecode.Text == "27 MAHARASHTRA")
        //    {
        //        txt_cgst_amt.Text = Convert.ToDecimal(totalgrdtax / 2).ToString("##.00");
        //        txt_sgst_amt.Text = Convert.ToDecimal(totalgrdtax / 2).ToString("##.00");
        //        txt_igst_amt.Text = Convert.ToDecimal(00).ToString("##.00");
        //    }
        //    else
        //    {
        //        txt_cgst_amt.Text = Convert.ToDecimal(00).ToString("##.00");
        //        txt_sgst_amt.Text = Convert.ToDecimal(00).ToString("##.00");
        //        txt_igst_amt.Text = Convert.ToDecimal(totalgrdtax).ToString("##.00");
        //    }
        //}
        //else
        //{
        //    decimal totaltax = 0;
        //    decimal Total11177 = 0, Qty = 0, rate111111 = 0, totalrateqty = 0;s
        //    foreach (GridViewRow g1 in gvPurchaseRecord.Rows)
        //    {
        //        string lbltotaltax = (g1.FindControl("lbl_tax_grd") as Label).Text;
        //        string lblrate = (g1.FindControl("lbl_rate_grd") as Label).Text;
        //        string lblqty = (g1.FindControl("lbl_quntity_grd") as Label).Text;
        //        totaltax = Convert.ToDecimal(lbltotaltax);

        //        rate111111 = Convert.ToDecimal(lblrate);
        //        Qty = Convert.ToDecimal(lblqty);
        //        Total11177 = ((Qty * rate111111) * totaltax) / 100;
        //        totalrateqty += Total11177;
        //    }
        //    if (txtstatecode.Text == "27 MAHARASHTRA")
        //    {
        //        txt_cgst_amt.Text = Convert.ToDecimal(totalrateqty / 2).ToString("##.00");
        //        txt_sgst_amt.Text = Convert.ToDecimal(totalrateqty / 2).ToString("##.00");
        //        txt_igst_amt.Text = Convert.ToDecimal(00).ToString("##.00");
        //    }
        //    else
        //    {
        //        txt_cgst_amt.Text = Convert.ToDecimal(00).ToString("##.00");
        //        txt_sgst_amt.Text = Convert.ToDecimal(00).ToString("##.00");
        //        txt_igst_amt.Text = Convert.ToDecimal(totalrateqty).ToString("##.00");
        //    }
        //}

        ScriptManager.RegisterStartupScript(this, this.GetType(), "Success", "scrollToElement();", true);
    }

    protected void txt_rate_Quogrd_TextChanged(object sender, EventArgs e)
    {
        GridViewRow row = (sender as TextBox).NamingContainer as GridViewRow;
        QuotationGrid_Calculation(row);
    }

    protected void txt_quntity_Quogrd_TextChanged(object sender, EventArgs e)
    {
        GridViewRow row = (sender as TextBox).NamingContainer as GridViewRow;
        QuotationGrid_Calculation(row);
    }

    protected void txt_tax_quogrd_TextChanged(object sender, EventArgs e)
    {
        GridViewRow row = (sender as TextBox).NamingContainer as GridViewRow;
        QuotationGrid_Calculation(row);
    }

    protected void txt_discount_Quogrd_TextChanged(object sender, EventArgs e)
    {
        GridViewRow row = (sender as TextBox).NamingContainer as GridViewRow;
        QuotationGrid_Calculation(row);
    }

    protected void txt_jobno_TextChanged(object sender, EventArgs e)
    {
        SqlDataAdapter Da = new SqlDataAdapter("SELECT Id,JobNo,MateName FROM tblInwardEntry WHERE JobNo ='" + txt_jobno.Text + "'", con);
        DataTable Dt = new DataTable();
        Da.Fill(Dt);
        txtpoduct.Text = Dt.Rows[0]["MateName"].ToString();
    }

    //Job No Against Quation No For componnt details
    public void GetJobNO()
    {
        DataTable dt = new DataTable();
        SqlDataAdapter sd = new SqlDataAdapter("select JobNo from  tblInwardEntry  where CustName='" + txt_Customer_name.Text + "'", con);
        sd.Fill(dt);

        if (dt.Rows.Count > 0)
        {
            txt_jobno.DataTextField = "JobNo";
            txt_jobno.DataSource = dt;
            txt_jobno.DataBind();
        }
        else
        {

        }
    }

    private void Show_Grid1()
    {
        try
        {
            ViewState["RowNo"] = (int)ViewState["RowNo"] + 1;
            DataTable Dt = (DataTable)ViewState["CPO_Product"];
            Dt.Rows.Add(ViewState["RowNo"], txt_jobno.Text.Trim(), txtpoduct.Text.Trim(), txt_discription.Text, txt_printdescription.Text, txt_hsn.Text, txt_rate.Text, txt_unit.Text, txt_quntity.Text, txt_tax.Text, txt_discount.Text, txt_total_amount.Text);
            ViewState["CPO_Product"] = Dt;

            //txt_jobno.Text = string.Empty;
            txtpoduct.Text = string.Empty;
            txt_discription.Text = string.Empty;
            txt_printdescription.Text = string.Empty;
            txt_hsn.Text = string.Empty;
            txt_rate.Text = string.Empty;
            txt_unit.Text = string.Empty;
            txt_quntity.Text = string.Empty;
            txt_tax.Text = string.Empty;
            txt_discount.Text = string.Empty;
            txt_total_amount.Text = string.Empty;
            txtpoduct.Text = string.Empty;

            gvPurchaseRecord.DataSource = (DataTable)ViewState["CPO_Product"];
            gvPurchaseRecord.DataBind();
        }
        catch (Exception ex)
        {
            throw ex; //  Block of code to handle errors
        }
    }

    protected void ddlagainstby_TextChanged(object sender, EventArgs e)
    {
        if (ddlagainstby.SelectedItem.Text == "Direct")
        {
            ddlquotationno.Enabled = false;
        }
        else
        {
            ddlquotationno.Enabled = true;
        }
    }


    // Nikhil Custom code to load Quotation records 

    protected void ShowQuotationsHeader()
    {
        SqlDataAdapter Da = new SqlDataAdapter("SELECT JobNoCount,JobNo,Quotation_no,Customer_Name,SubCustomer,Quotation_Date,ExpiryDate,Address,Mobile_No,Phone_No,GST_No,State_Code,kind_Att,CGST,SGST,AllTotal_price,Total_in_word,[Term_Condition_1],[Term_Condition_2],[Term_Condition_3],[Term_Condition_4],[Term_Condition_5],[Term_Condition_6],IGST FROM tbl_Quotation_two_Hdr WHERE Quotation_no='" + ID + "'", con);
        DataTable Dt = new DataTable();
        Da.Fill(Dt);
        if (Dt.Rows.Count > 0)
        {
            txtJobNoCount.Text = Dt.Rows[0]["JobNoCount"].ToString();
            ddlquotationno.SelectedItem.Text = Dt.Rows[0]["Quotation_no"].ToString();
            txt_Customer_name.Text = Dt.Rows[0]["Customer_Name"].ToString();
            txtsubcust.Text = Dt.Rows[0]["SubCustomer"].ToString();
            txt_delivery_address.Text = Dt.Rows[0]["Address"].ToString();
            txt_mobile_no.Text = Dt.Rows[0]["Mobile_No"].ToString();
            txt_kind_att.Text = Dt.Rows[0]["kind_Att"].ToString();
            txt_gst_no.Text = Dt.Rows[0]["GST_No"].ToString();
            txtstatecode.Text = Dt.Rows[0]["State_Code"].ToString();

            string str = Dt.Rows[0]["Term_Condition_1"].ToString();
            string str1 = Dt.Rows[0]["Term_Condition_2"].ToString();
            string str2 = Dt.Rows[0]["Term_Condition_3"].ToString();
            string str3 = Dt.Rows[0]["Term_Condition_4"].ToString();
            string str4 = Dt.Rows[0]["Term_Condition_5"].ToString();
            string str5 = Dt.Rows[0]["Term_Condition_6"].ToString();
            string[] arrstr = str.ToString().Split('-');
            string[] arrstr1 = str1.ToString().Split('-');
            string[] arrstr2 = str2.ToString().Split('-');
            string[] arrstr3 = str3.ToString().Split('-');
            string[] arrstr4 = str4.ToString().Split('-');
            string[] arrstr5 = str5.ToString().Split('-');

            if (arrstr.Length > 0)
            {
                txt_term_1.Text = arrstr[0].ToString();
                txt_condition_1.Text = arrstr[1].ToString();
            }
            if (arrstr1.Length > 0)
            {
                txt_term_2.Text = arrstr1[0].ToString();
                txt_condition_2.Text = arrstr1[1].ToString();
            }
            if (arrstr2.Length > 0)
            {
                txt_term_3.Text = arrstr2[0].ToString();
                txt_condition_3.Text = arrstr2[1].ToString();
            }
            if (arrstr3.Length > 0)
            {
                txt_term_4.Text = arrstr3[0].ToString();
                txt_condition_4.Text = arrstr3[1].ToString();
            }

            if (arrstr4.Length > 0)
            {
                txt_term_5.Text = arrstr4[0].ToString();
                txt_condition_5.Text = arrstr4[1].ToString();
            }
            if (arrstr5.Length > 0)
            {
                txt_term_6.Text = arrstr5[0].ToString();
                txt_condition_6.Text = arrstr5[1].ToString();
            }
        }

        SqlDataAdapter Sda = new SqlDataAdapter("SELECT * FROM tblCustomerContactPerson WHERE CustName='" + txt_Customer_name.Text + "'", con);
        DataTable Sdt = new DataTable();
        Sda.Fill(Sdt);
        Grd_MAIL.DataSource = Sdt;
        Grd_MAIL.DataBind();

   
    }

    protected void ShowQuotationDtl()
    {
        ////Automatic description bind in job number from quaation details table
        DataTable dt3 = new DataTable();
        SqlDataAdapter sad3 = new SqlDataAdapter("select  product as MateName , Description As PrintDescription, " +
            "DATEDIFF(DAY, CreatedOn, GETDATE()) AS DaysSinceCreated, * from [tbl_Quotation_two_Dtls] where " +
            "Quotation_no='" + ddlquotationno.SelectedItem.Text + "' AND JobStatus = 'Pending'", con);
        sad3.Fill(dt3);
        int count = 1;
        if (dt3.Rows.Count > 0)
        {
            ViewState["RowNo"] = 0;
            Dt_Itemsdetails.Columns.AddRange(new DataColumn[13] { new DataColumn("Id"),new DataColumn("JobNo"), new DataColumn("MateName"),
                    new DataColumn("CompName"),  new DataColumn("PrintDescription"), new DataColumn("HSN"),
                    new DataColumn("Rate"),  new DataColumn("Units"),
                    new DataColumn("Qty"),  new DataColumn("Tax"),
                    new DataColumn("Disc_per"), new DataColumn("total"), new DataColumn("DaysSinceCreated")
                  });

            ViewState["Customerdetails"] = Dt_Itemsdetails;
            for (int i = 0; i < dt3.Rows.Count; i++)
            {
                 Dt_Itemsdetails.Rows.Add(count, dt3.Rows[i]["JobNo"].ToString(), dt3.Rows[i]["MateName"].ToString(), dt3.Rows[i]["CompName"].ToString(), dt3.Rows[i]["PrintDescription"].ToString(), dt3.Rows[i]["HSN"].ToString(), dt3.Rows[i]["Rate"].ToString(), dt3.Rows[i]["Units"].ToString(), dt3.Rows[i]["Qty"].ToString(), dt3.Rows[i]["Tax"].ToString(), 
                     dt3.Rows[i]["Disc_per"].ToString(), dt3.Rows[i]["total"].ToString(), dt3.Rows[i]["DaysSinceCreated"].ToString());
                count = count + 1;
            }
            quatationgrid.DataSource = Dt_Itemsdetails;
            quatationgrid.DataBind();
            quatationgrid.EmptyDataText = "Not Records Found";        
        }

        //SqlDataAdapter Sda = new SqlDataAdapter("SELECT * FROM tbl_Quotation_two_Hdr WHERE Quotation_no='" + ddlquotationno.SelectedItem.Text + "'", con);
        //DataTable Sdt = new DataTable();
        //Sda.Fill(Sdt);
        //if (Sdt.Rows.Count > 0)
        //{
        //    txt_cgst_amt.Text = Sdt.Rows[0]["CGST"].ToString();
        //    txt_sgst_amt.Text = Sdt.Rows[0]["SGST"].ToString();
        //    txt_grand_total.Text = Sdt.Rows[0]["AllTotal_price"].ToString();

        //}
    }

    protected void chkSelect_CheckedChanged(object sender, EventArgs e)
    {
        CheckBox chk = (CheckBox)sender;
        GridViewRow row = (GridViewRow)chk.NamingContainer;


        string jobNo = ((Label)row.FindControl("LblJobNo")).Text;
        decimal totalAmount = Convert.ToDecimal(((Label)row.FindControl("lbl_total_amount_grd")).Text); 
        
        if (!chk.Checked)
        {
          
            HandleJobNoUncheck(jobNo, totalAmount);
        }
        else
        {
          
            HandleJobNoCheck(jobNo, totalAmount);
        }
    }

    private void HandleJobNoUncheck(string jobNo, decimal amount)
    {
        
        UpdateGrandTotal(amount, isAdding: false);
       
    }

    private void HandleJobNoCheck(string jobNo, decimal amount)
    {
       
        UpdateGrandTotal(amount, isAdding: true);
    
    }

    private void UpdateGrandTotal(decimal amount, bool isAdding)
    {

        decimal SubTotal = Convert.ToDecimal(txt_total.Text);
       
        decimal GrandTotal =Convert.ToDecimal(txt_grand_total.Text);
       
        if (isAdding)
        {
            Total = SubTotal + amount; 
        }
        else
        {
            Total = SubTotal - amount; 
        }

        txt_total.Text = Total.ToString("##.00");

        decimal GSTamt = (Total * 9 / 100); 
       decimal IGSTamt = (Total * 18 / 100);

        if (txtstatecode.Text == "27 MAHARASHTRA")
        {
            txt_sgst_amt.Text = GSTamt.ToString();
            txt_cgst_amt.Text = GSTamt.ToString();
            txt_igst_amt.Text = "0";
        }
        else
        {
            txt_sgst_amt.Text = "0";
            txt_cgst_amt.Text = "0";
            txt_igst_amt.Text = IGSTamt.ToString();
        }
   
        decimal grd_total = Total + Convert.ToDecimal(txt_sgst_amt.Text) + Convert.ToDecimal(txt_cgst_amt.Text) + Convert.ToDecimal(txt_igst_amt.Text);
        txt_grand_total.Text = grd_total.ToString("##.00");

        lbl_Amount_In_Word.Text = ConvertToWords(grd_total.ToString());
    }
}

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <svg xmlns="http://www.w3.org/2000/svg" id="flag-icon-css-tg" viewBox="0 0 640 480">
  <defs>
    <clipPath id="tg-a">
      <path fill-opacity=".7" d="M0 0h682.7v512H0z"/>
    </clipPath>
  </defs>
  <g fill-rule="evenodd" clip-path="url(#tg-a)" transform="scale(.9375)">
    <path fill="#ffe300" d="M0 0h767.6v512H0z"/>
    <path fill="#118600" d="M0 208.1h767.6V311H0zM0 .2h767.6v102.9H0z"/>
    <path fill="#d80000" d="M0 .3h306.5v310.6H0z"/>
    <path fill="#fff" d="M134.4 128.4c0-.8 18.9-53 18.9-53l17 52.2s57.4 1.7 57.4.8-45.3 34.3-45.3 34.3 21.4 60 20.5 58.2c-.8-1.7-49.6-36-49.6-36s-49.7 34.3-48.8 34.3c.8 0 18.8-56.5 18.8-56.5l-44.5-33.4 55.6-.9z"/>
    <path fill="#118600" d="M0 409.2h767.6V512H0z"/>
  </g>
</svg>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        [ZoneTransfer]
ZoneId=3
ReferrerUrl=https://themewagon.com/
HostUrl=https://objects.githubusercontent.com/github-production-release-asset-2e65be/363614075/94fece80-ab5c-11eb-996f-892bf208f043?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=releaseassetproduction%2F20241114%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20241114T102939Z&X-Amz-Expires=300&X-Amz-Signature=2fffa0a4d4d10c9805375239f890e0cb90a51481ac52ff0b1ee64792a296dbf2&X-Amz-SignedHeaders=host&response-content-disposition=attachment%3B%20filename%3DAdminLTE-3.1.0.zip&response-content-type=application%2Foctet-stream
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="flag-icon-css-tj" viewBox="0 0 640 480">
  <path fill="#060" d="M0 0h640v480H0z"/>
  <path fill="#fff" d="M0 0h640v342.9H0z"/>
  <path fill="#c00" d="M0 0h640v137.1H0z"/>
  <path fill="#f8c300" d="M300.8 233.6a8.6 8.6 0 0116 4V272h6.4v-34.3a8.6 8.6 0 0116-4 20.2 20.2 0 10-38.4 0"/>
  <path fill="#fff" d="M305.4 224.7a13.7 13.7 0 0114.6 6.5 13.7 13.7 0 0114.6-6.5 14.7 14.7 0 00-29.2 0"/>
  <path id="a" fill="#f8c300" d="M316.8 258.3a26 26 0 01-43.8 16.6 27 27 0 01-41 12c2.5 25 40 19.9 42.8-4.4 11.7 20.7 37.6 14.7 45.2-10.6z"/>
  <use width="100%" height="100%" fill="#f8c300" transform="matrix(-1 0 0 1 640 0)" xlink:href="#a"/>
  <path id="b" fill="#f8c300" d="M291.8 302.6c-5.3 11.3-15.7 13.2-24.8 4.1 0 0 3.6-2.6 7.6-3.3-.8-3.1.7-7.5 2.9-9.8a15 15 0 016.1 8.1c5.5-.7 8.2 1 8.2 1z"/>
  <use width="100%" height="100%" fill="#f8c300" transform="rotate(9.4 320 551.3)" xlink:href="#b"/>
  <use width="100%" height="100%" fill="#f8c300" transform="rotate(18.7 320 551.3)" xlink:href="#b"/>
  <path fill="none" stroke="#f8c300" stroke-width="11" d="M253.5 327.8a233.1 233.1 0 01133 0"/>
  <g fill="#f8c300" transform="translate(320 164.6) scale(.68571)">
    <path id="c" d="M301930 415571l-790463-574305h977066l-790463 574305L0-513674z" transform="scale(.00005)"/>
  </g>
  <g id="d" fill="#f8c300" transform="translate(320 260.6) scale(.68571)">
    <use width="100%" height="100%" transform="translate(-70 -121.2)" xlink:href="#c"/>
    <use width="100%" height="100%" transform="translate(-121.2 -70)" xlink:href="#c"/>
    <use width="100%" height="100%" transform="translate(-140)" xlink:href="#c"/>
  </g>
  <use width="100%" height="100%" fill="#f8c300" transform="matrix(-1 0 0 1 640 0)" xlink:href="#d"/>
</svg>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <svg xmlns="http://www.w3.org/2000/svg" id="flag-icon-css-tk" viewBox="0 0 640 480">
  <path fill="#00247d" d="M0 0h640v480H0z"/>
  <path fill="#fed100" d="M108.1 354.6c-6.7-.1 62.8-37 120.9-84.4 76.2-62.1 240.3-161.4 288.6-177.6 5-1.7-10.3 8.6-12.3 11.9-51.5 61-10.4 176 54 233.9 19.4 14.8 18.4 15.6 54.3 17v3.4l-505.5-4.2zm-4.2 6.7s-4.9 3.5-4.9 6.1c0 2.9 5.5 6.7 5.5 6.7l498.5 5.5 9.2-6.1-12.8-7.9-495.5-4.3z"/>
  <path fill="#fff" d="M106.8 109.1l-4 12.2 10.4-7.5 10.3 7.5-3.9-12.2 10.3-7.5h-12.8l-3.9-12.2-4 12.2H96.4zm78.1 57.4l8.6-6.3h-10.7l-3.3-10.1-3.3 10.1h-10.6l8.6 6.3-3.3 10.1 8.6-6.3 8.7 6.3zm-145.2 13l-4-12.2-3.9 12.2H19l10.3 7.5-3.9 12.2 10.3-7.5 10.4 7.5-4-12.2 10.4-7.5zm78.1 122.3l-4.6-14.2-4.6 14.2h-15l12.1 8.7-4.6 14.3 12.1-8.8 12.1 8.8-4.7-14.3 12.1-8.7z"/>
</svg>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            [ZoneTransfer]
ZoneId=3
ReferrerUrl=https://themewagon.com/
HostUrl=https://objects.githubusercontent.com/github-production-release-asset-2e65be/363614075/94fece80-ab5c-11eb-996f-892bf208f043?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=releaseassetproduction%2F20241114%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20241114T102939Z&X-Amz-Expires=300&X-Amz-Signature=2fffa0a4d4d10c9805375239f890e0cb90a51481ac52ff0b1ee64792a296dbf2&X-Amz-SignedHeaders=host&response-content-disposition=attachment%3B%20filename%3DAdminLTE-3.1.0.zip&response-content-type=application%2Foctet-stream
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <svg xmlns="http://www.w3.org/2000/svg" id="flag-icon-css-tm" viewBox="0 0 640 480">
  <defs>
    <clipPath id="tm-a">
      <path fill-opacity=".7" d="M42.7 0h682.6v512H42.7z"/>
    </clipPath>
  </defs>
  <g fill-rule="evenodd" clip-path="url(#tm-a)" transform="translate(-40) scale(.9375)">
    <path fill="#28ae66" d="M0 0h768v512H0z"/>
    <g fill="#fff" stroke-width="1pt">
      <path d="M263.3 137.5c27.9 13.4 61.1 0 73.1-18.6 12.4-17.4 13.9-46.5-7.4-73.2 33 27.4 40.4 58.5 23.9 84.1-22 29.3-70.6 28.4-89.6 7.7z"/>
      <path d="M312.8 69.4l5.6.1L314 73l1.7 5.6-4.7-3.3-4.5 3.3 1.5-5.5-4.5-3.5 5.6-.1L311 64zm-27.7 34.8h5.6l-4.4 3.6 1.7 5.5-4.7-3.3-4.6 3.4 1.6-5.6-4.5-3.4 5.6-.2 1.8-5.5zm1.8-27.4h5.7l-4.5 3.6 1.7 5.5-4.6-3.3-4.6 3.4 1.6-5.6-4.5-3.5 5.6-.1 1.8-5.5zm0-27.5h5.7L288 53l1.7 5.5-4.6-3.2-4.6 3.3 1.6-5.5-4.5-3.5 5.6-.1L285 44zm-30.7 34.8h5.6l-4.5 3.6 1.7 5.5-4.6-3.3-4.6 3.4 1.6-5.6-4.5-3.4 5.6-.2 1.8-5.5z"/>
    </g>
    <path fill="#ca3745" d="M47.5 0h164.6v512H47.5z"/>
    <g fill="#faae29" stroke-width="1pt">
      <path d="M47.5 133.5v-3.7l6.8-9.1-1.3-1.9 4-5.4-1.3-1.9-2.7 3.7-1.4-1.8 9.6-12.8 1.4 1.8-1.4 1.8L64 108l6.8-9.2-6.9-8.9-2.7 3.4 1.4 1.9-1.4 1.8-9.6-12.8 1.4-1.8 2.7 3.6 1.4-1.8-4.1-5.5 1.3-1.8-6.8-9.2V64l9.6 12.8-1.4 1.8 4.1 5.5-2.7 3.7 2.7 3.6L64 86l9.7 13-9.7 12.6-4-5.5-2.8 3.7 2.7 3.7-4 5.4 1.3 1.9-9.6 12.8z"/>
      <path d="M47.5 87.8l1.4 3.6V97H53l2.8 1.8-2.8 1.9h-4v5.4l-1.4 3.7v-22z"/>
    </g>
    <g fill="#faae29" stroke-width="1pt">
      <path d="M47.5 221.3v-3.7l6.8-9.1-1.3-1.9 4-5.5-1.3-1.8L53 203l-1.4-1.9 9.6-12.8 1.4 1.9-1.4 1.8 2.8 3.7 6.8-9.2-6.9-8.9-2.7 3.4 1.4 1.9-1.4 1.8-9.6-12.8L53 170l2.7 3.6 1.4-1.8-4.1-5.5 1.3-1.8-6.8-9.2v-3.6l9.6 12.8-1.4 1.8 4.1 5.5-2.7 3.6 2.7 3.7 4.1-5.5 9.7 13-9.7 12.6-4-5.5-2.8 3.7 2.7 3.6-4 5.5 1.3 1.9-9.6 12.8z"/>
      <path d="M47.5 175.5l1.4 3.7v5.5H53l2.8 1.8-2.8 1.8h-4v5.5l-1.4 3.7v-22z"/>
    </g>
    <g fill="#faae29" stroke-width="1pt">
      <path d="M47.5 309v-3.6l6.8-9.2-1.3-1.8 4-5.5-1.3-1.8-2.7 3.6-1.4-1.8 9.6-12.8 1.4 1.8-1.4 1.9 2.8 3.7 6.8-9.2-6.9-9-2.7 3.5 1.4 1.8-1.4 1.8-9.6-12.8 1.4-1.8 2.7 3.7 1.4-1.9-4.1-5.4 1.3-1.9-6.8-9.1v-3.7l9.6 12.8-1.4 1.9 4.1 5.4-2.7 3.7 2.7 3.7 4.2-5.5 9.6 13-9.7 12.6-4-5.5-2.8 3.6 2.7 3.7-4 5.5 1.3 1.8-9.6 12.8z"/>
      <path d="M47.5 263.3L49 267v5.5h4l2.8 1.8L53 276h-4v5.5l-1.4 3.7v-22z"/>
    </g>
    <g fill="#faae29" stroke-width="1pt">
      <path d="M47.5 391.3v-3.7l6.8-9.1-1.3-1.8 4-5.5-1.3-1.8L53 373l-1.4-1.8 9.6-12.8 1.4 1.8-1.4 1.8 2.8 3.7 6.8-9.1-6.9-9-2.7 3.5 1.4 1.8-1.4 1.8-9.6-12.8 1.4-1.8 2.7 3.7 1.4-1.9-4.1-5.5 1.3-1.8-6.8-9.1v-3.7l9.6 12.8-1.4 1.8 4.1 5.5-2.7 3.7 2.7 3.6 4.2-5.4 9.6 13-9.7 12.6-4-5.5-2.8 3.6 2.7 3.7-4 5.5 1.3 1.8-9.6 12.8z"/>
      <path d="M47.5 345.6l1.4 3.6v5.5H53l2.8 1.9-2.8 1.8h-4v5.5l-1.4 3.6v-22z"/>
    </g>
    <g fill="#faae29" stroke-width="1pt">
      <path d="M212.1 133.5v-3.7l-6.8-9.1 1.4-1.9-4.1-5.4 1.3-1.9 2.8 3.7 1.4-1.8-9.6-12.8-1.4 1.8 1.4 1.8-2.9 3.7-6.7-9.2 6.8-8.9 2.8 3.4-1.4 1.9 1.3 1.8 9.6-12.8-1.3-1.8-2.8 3.6-1.3-1.8 4-5.5-1.3-1.8 6.8-9.2V64l-9.5 12.8 1.3 1.8-4 5.5 2.7 3.7-2.8 3.6-4.1-5.5-9.7 13 9.7 12.6 4.1-5.5 2.8 3.7-2.8 3.7 4.1 5.4-1.3 1.9 9.5 12.8z"/>
      <path d="M212.1 87.8l-1.4 3.6V97h-4l-2.8 1.8 2.7 1.9h4.1v5.4l1.4 3.7v-22z"/>
    </g>
    <g fill="#faae29" stroke-width="1pt">
      <path d="M212.6 221.3v-3.7l-6.8-9.1 1.3-1.9-4-5.5 1.3-1.8 2.7 3.7 1.4-1.9-9.6-12.8-1.4 1.9 1.4 1.8-2.8 3.7-6.8-9.2 6.9-8.9 2.7 3.4-1.4 1.8 1.4 1.9 9.6-12.8-1.4-1.9-2.7 3.7-1.4-1.8 4.1-5.5-1.3-1.8 6.8-9.2v-3.6l-9.6 12.8 1.4 1.8-4.1 5.5 2.7 3.6-2.7 3.7-4.1-5.5-9.7 13 9.7 12.6 4-5.5 2.8 3.7-2.7 3.6 4 5.5-1.3 1.8 9.6 12.8z"/>
      <path d="M212.6 175.5l-1.4 3.7v5.5H207l-2.8 1.8 2.8 1.8h4v5.5l1.5 3.7v-22z"/>
    </g>
    <g fill="#faae29" stroke-width="1pt">
      <path d="M212.1 309v-3.6l-6.8-9.2 1.4-1.8-4.1-5.5 1.3-1.8 2.8 3.6 1.4-1.8-9.6-12.8-1.4 1.8 1.4 1.9-2.9 3.7-6.7-9.2 6.8-9 2.8 3.5-1.4 1.8 1.3 1.8 9.6-12.8-1.3-1.8-2.8 3.7-1.3-1.9 4-5.4-1.3-1.9 6.8-9.1v-3.7l-9.5 12.8 1.3 1.9-4 5.4 2.7 3.7-2.8 3.7-4.1-5.5-9.7 13 9.7 12.6 4.1-5.5 2.8 3.6-2.8 3.7 4.1 5.5-1.3 1.8L212 309z"/>
      <path d="M212.1 263.3l-1.4 3.7v5.5h-4l-2.8 1.8 2.7 1.8h4.1v5.5l1.4 3.7v-22z"/>
    </g>
    <g fill="#faae29" stroke-width="1pt">
      <path d="M212.1 391.3v-3.7l-6.8-9.1 1.4-1.8-4.1-5.5 1.3-1.8 2.8 3.6 1.4-1.8-9.6-12.8-1.4 1.8 1.4 1.8-2.9 3.7-6.7-9.1 6.8-9 2.8 3.5-1.4 1.8 1.3 1.8L208 342l-1.3-1.8-2.8 3.7-1.3-1.9 4-5.5-1.3-1.8 6.8-9.1v-3.7l-9.5 12.8 1.3 1.8-4 5.5 2.7 3.7-2.8 3.6-4.1-5.4-9.7 13 9.7 12.6 4.1-5.5 2.8 3.6-2.8 3.7 4.1 5.5-1.3 1.8 9.5 12.8z"/>
      <path d="M212.1 345.6l-1.4 3.6v5.5h-4l-2.8 1.9 2.7 1.8h4.1v5.5l1.4 3.6v-22z"/>
    </g>
    <path fill="#faae29" stroke-width="1pt" d="M47.5 34.7v-3.6l6.8-9.2-1.3-1.8 4-5.5-1.3-1.8-2.7 3.7-1.4-1.9 9.6-12.8 1.4 1.9-1.4 1.8L64 9.2 70.8 0h2.8L64 12.8l-4.2-5.5-2.7 3.7 2.7 3.6-4 5.5L57 22l-9.5 12.8zm0-34.7h8.3L53 1.8h-4v5.5L47.4 11V0zm164.6 34.7v-3.6l-6.8-9.2 1.4-1.8-4.1-5.5 1.3-1.8 2.8 3.7 1.3-1.9-9.6-12.8-1.3 1.9 1.3 1.8-2.8 3.7-6.8-9.2H186l9.7 12.8 4.1-5.5 2.8 3.7-2.8 3.6 4.1 5.5-1.3 1.8 9.5 12.8zm0-34.7h-8.2l2.7 1.8h4.1v5.5l1.4 3.7V0z"/>
    <path fill="#faae29" d="M116.1 504.7s6-10.4 20.8-13.5c14.9-3.2 17.5 6.9 26 6.9s22-7 22-7-13.5 13.3-24 13c-10.3-.3-13.8-7-24.5-6-10.6 1-20.3 6.9-20.3 6.6z"/>
    <path fill="#faae29" d="M144.8 504.7s-5.9-10.4-20.7-13.5c-15-3.2-17.5 6.9-26 6.9s-22-7-22-7 13.5 13.3 23.9 13c10.4-.3 14-7 24.5-6 10.7 1 20.3 6.9 20.3 6.6z"/>
    <g fill="#faae29" stroke-width="1pt">
      <path d="M96.2 487.5c-1.3-2.7-4.6-14.7-2.9-16.2 2.7-1 9.7 11.3 9 22.2-4.6 2.5-20-1-19.9-4.2 1.1-4.5 9.9-3 13.8-1.8z"/>
      <path d="M86.8 477c-.8-3-2.2-15.6-.2-16.6 2.7-.2 7.6 13.7 5.3 24.2-4.9 1.2-19.5-6.5-18.8-9.6 1.8-4 10-.2 13.7 2z"/>
      <path d="M79.2 465.4c-.6-3.2-.8-16 1.2-16.6 2.7.2 6.4 14.8 3.2 24.9-5 .4-18.8-9.6-17.8-12.5 2-3.8 10 1.3 13.4 4.2z"/>
      <path d="M73.2 453c-.2-3.3 1-16 3.1-16.2 2.7.7 4.6 15.9.2 25.2-4.9-.6-17.4-13.3-16-16 2.4-3.3 9.7 3.4 12.7 7z"/>
      <path d="M69 439.9c.2-3.3 2.8-15.5 4.9-15.4 2.5 1.3 2.8 16.6-2.5 25-4.8-1.6-15.9-16.5-14.3-19 2.9-2.8 9.3 5.3 12 9.4z"/>
      <path d="M70.2 425c-.3 13-2.7 13.2-7 3.6-2-3.7-2.2-18.7-.5-19.3 2.5 0 7.4 10.7 7.5 15.7z"/>
    </g>
    <g fill="#faae29" stroke-width="1pt">
      <path d="M164 489c1.3-2.8 4.6-14.8 2.9-16.3-2.7-1-9.6 11.2-9 22.2 4.6 2.5 20.1-1 19.9-4.2-1.1-4.5-9.8-3-13.8-1.8z"/>
      <path d="M173.4 478.4c.9-3 2.2-15.6.3-16.6-2.7-.2-7.7 13.6-5.3 24.2 4.8 1.2 19.5-6.5 18.7-9.6-1.7-4.1-1