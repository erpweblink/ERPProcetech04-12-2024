            //"VALUES ('" + Id + "','" + JobNo_GET + "','" + Discription_GET + "','" + HSN_GET + "','" + Tax_GET + "','" + Quntity_GET + "','" + Unit_GET + "','" + Rate_GET + "','" + Discount_GET + "','" + Total_Amount_GET + "')", con);
                    "VALUES ('" + Id + "','" + JobNo_GET + "','" + Discription_GET + "','" + HSN_GET + "','" + Tax_GET + "','" + Quntity_GET + "','" + Unit_GET + "','" + Rate_GET + "','" + Discount_GET + "','" + Total_Amount_GET + "'  ,'" + MateName + "', '" + PrintDescription + "','" + InvoiceNo + "' )", con);
                    con.Open();
                    Cmd1.ExecuteNonQuery();
                    con.Close();
                }

                foreach (GridViewRow g1 in Grd_MAIL.Rows)
                {
                    string MAIL = (g1.FindControl("lblmultMail") as Label).Text;
                    bool chkmail = (g1.FindControl("chkmail") as CheckBox).Checked;
                    string lbldesignation = (g1.FindControl("lbldesignation") as Label).Text;
                    SqlCommand cmdtable = new SqlCommand("insert into InvoiceMail(InvoiceNo,Email,CreatedBy,CreatedOn,InvoiceId,chkEmail,designation) values(@InvoiceNo,@Email,@CreatedBy,@CreatedOn,@InvoiceId,@chkEmail,@designation)", con);
                    cmdtable.Parameters.AddWithValue("@InvoiceNo", txt_InvoiceNo.Text);
                    cmdtable.Parameters.AddWithValue("@Email", MAIL);
                    cmdtable.Parameters.AddWithValue("@chkEmail", chkmail);
                    cmdtable.Parameters.AddWithValue("@CreatedBy", CretedBy);
                    cmdtable.Parameters.Add("@InvoiceId", Id);
                    cmdtable.Parameters.Add("@designation", lbldesignation);
                    cmdtable.Parameters.AddWithValue("@CreatedOn", Date);
                    con.Open();
                    cmdtable.ExecuteNonQuery();
                    con.Close();
                }

                ClientScript.RegisterStartupScript(this.GetType(), "alert", "HideLabel('Data saved Sucessfully');window.location ='/Admin/TaxInvoiceList.aspx';", true);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
    }

    private void TableCalulation()
    {
        decimal Qty;
        if (string.IsNullOrEmpty(txt_quntity.Text))
        {
            Qty = 0;
        }
        else
        {
            var totalamt = Convert.ToDecimal(txt_quntity.Text.Trim()) * Convert.ToDecimal(txt_rate.Text.Trim());
            txt_total_amount.Text = totalamt.ToString();

        }
        //decimal TaxAmt;
        //if (string.IsNullOrEmpty(txt_tax.Text))
        //{
        //    TaxAmt = 0;
        //}
        //else
        //{

        //    decimal val1 = Convert.ToDecimal(txt_total_amount.Text);
        //    decimal val2 = Convert.ToDecimal(txt_tax.Text);

        //    TaxAmt = (val1 * val2 / 100);
        //}

        //var TotalWithTax = Convert.ToDecimal(txt_total_amount.Text) + (TaxAmt);
        //txt_total_amount.Text = TotalWithTax.ToString();

        decimal DiscountAmt;
        if (string.IsNullOrEmpty(txt_discount.Text))
        {
            DiscountAmt = 0;
        }
        else
        {
            DiscountAmt = Convert.ToDecimal(txt_total_amount.Text) * Convert.ToDecimal(txt_discount.Text) / 100;
        }
        var GrossAmt = Convert.ToDecimal(txt_total_amount.Text) - (DiscountAmt);
        txt_total_amount.Text = GrossAmt.ToString("##.00");
    }

    private void ShowGrid()
    {
        ViewState["RowNo"] = (int)ViewState["RowNo"] + 1;
        DataTable Dt = (DataTable)ViewState["Invoice"];

        Dt.Rows.Add(ViewState["RowNo"], txt_jobno.Text.Trim(), txt_discription.Text.Trim(), txtprintdescription.Text.Trim(), txt_hsn.Text, txt_rate.Text, txt_unit.Text, txt_quntity.Text, txt_tax.Text, txt_discount.Text, txt_total_amount.Text);
        ViewState["Invoice"] = Dt;

        //txt_jobno.Text = string.Empty;
        txtprintdescription.Text = string.Empty;
        txt_discription.Text = string.Empty;
        txt_hsn.Text = string.Empty;
        txt_rate.Text = string.Empty;
        txt_unit.Text = string.Empty;
        txt_quntity.Text = string.Empty;
        txt_tax.Text = string.Empty;
        txt_discount.Text = string.Empty;
        txt_total_amount.Text = string.Empty;

        gvPurchaseRecord.DataSource = Dt;
        gvPurchaseRecord.DataBind();
    }

    private void GriCalculation(GridViewRow row)
    {
        TextBox Tax = (TextBox)row.FindControl("txt_tax_grd");
        TextBox Quntity = (TextBox)row.FindControl("txt_quntity_grd");
        TextBox Rate = (TextBox)row.FindControl("txt_rate_grd");
        TextBox Discount = (TextBox)row.FindControl("txt_discount_grd");
        TextBox TotalAmount = (TextBox)row.FindControl("txt_total_amount_grd");


        decimal Qty;
        if (string.IsNullOrEmpty(Quntity.Text))
        {
            Qty = 0;
        }
        else
        {
            var totalamt = Convert.ToDecimal(Quntity.Text.Trim()) * Convert.ToDecimal(Rate.Text.Trim());
            TotalAmount.Text = totalamt.ToString();
        }
        decimal DiscountAmt;
        if (string.IsNullOrEmpty(Discount.Text))
        {
            DiscountAmt = 0;
        }
        else
        {
            DiscountAmt = Convert.ToDecimal(TotalAmount.Text) * Convert.ToDecimal(Discount.Text) / 100;
        }
        var GrossAmt = Convert.ToDecimal(TotalAmount.Text) - (DiscountAmt);
        TotalAmount.Text = GrossAmt.ToString("##.00");
        ScriptManager.RegisterStartupScript(this, this.GetType(), "Success", "scrollToElement();", true);
    }

    protected void txt_rate_TextChanged(object sender, EventArgs e)
    {
        if (txt_quntity.Text == "")
        {
            //ScriptManager.RegisterStartupScript(this, this.GetType(), "Alert", "alert('Please fill Quntity !!!');", true);
            txt_tax.Text = "0";
            txt_discount.Text = "0";
        }
        else
        {
            TableCalulation();
        }
    }

    protected void txt_quntity_TextChanged(object sender, EventArgs e)
    {
        if (txt_quntity.Text == "" || txt_rate.Text == "")
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "Alert", "alert('Please fill Rate  !!!');", true);
        }
        else
        {
            TableCalulation();

        }
    }

    protected void txt_tax_TextChanged(object sender, EventArgs e)
    {
        if (txt_quntity.Text == "")
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "Alert", "alert('Please fill Quntity !!!');", true);

        }
        else
        {
            TableCalulation();
        }
    }

    protected void txt_discount_TextChanged(object sender, EventArgs e)
    {
        TableCalulation();
    }

    protected void btn_add_more_Click(object sender, EventArgs e)
    {
        if (txt_discription.Text == "" || txt_hsn.Text == "" || txt_rate.Text == "" || txt_quntity.Text == "")
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "Alert", "alert('Please fill Component Information  !!!');", true);
            //txt_quntity.Focus();
        }
        else
        {
            //ShowGrid();
            Show_Grid1();
        }
        //if (hdnPoProductTot.Value != "")
        //{
        //    decimal totaltax = 0, totalgrdtax = 0;
        //    decimal Total11177 = 0, Qty = 0, rate111111 = 0, totalrateqty = 0;
        //    foreach (GridViewRow g1 in gvPurchaseRecord.Rows)
        //    {
        //        string lbltotaltax = (g1.FindControl("lbl_tax_grd") as Label).Text;
        //        string lblrate = (g1.FindControl("lbl_rate_grd") as Label).Text;
        //        string lblqty = (g1.FindControl("lbl_quntity_grd") as Label).Text;
        //        totaltax = Convert.ToDecimal(lbltotaltax);

        //        rate111111 = Convert.ToDecimal(lblrate);
        //        Qty = Convert.ToDecimal(lblqty);
        //        Total11177 = ((Qty * rate111111) * totaltax) / 100;
        //        totalrateqty += Total11177;
        //    }
        //    totalgrdtax = totalrateqty + Convert.ToDecimal(taxhidden.Value);
        //    if (txt_CompanyStateCode.Text == "27 MAHARASHTRA")
        //    {
        //        txt_cgst_amt.Text = Convert.ToDecimal(totalgrdtax / 2).ToString("##.00");
        //        txt_sgst_amt.Text = Convert.ToDecimal(totalgrdtax / 2).ToString("##.00");
        //        txt_igst_amt.Text = Convert.ToDecimal(00).ToString("##.00");
        //    }
        //    else
        //    {
        //        txt_cgst_amt.Text = Convert.ToDecimal(00).ToString("##.00");
        //        txt_sgst_amt.Text = Convert.ToDecimal(00).ToString("##.00");
        //        txt_igst_amt.Text = Convert.ToDecimal(totalgrdtax).ToString("##.00");
        //    }
        //    //decimal taxtotal = 0;
        //    //decimal totaltax1 = 0;
        //    //foreach (GridViewRow g1 in gvPurchaseRecord.Rows)
        //    //{
        //    //    string lbltotaltax = (g1.FindControl("lbl_tax_grd") as Label).Text;
        //    //    totaltax1 += Convert.ToDecimal(lbltotaltax);
        //    //}
        //    //taxtotal = totaltax1 + Convert.ToDecimal(taxhidden.Value);
        //    //txt_cgst_amt.Text = (taxtotal / 2).ToString();
        //    //txt_sgst_amt.Text = (taxtotal / 2).ToString();

        //}
        //else
        //{
        //    decimal totaltax = 0;
        //    decimal Total11177 = 0, Qty = 0, rate111111 = 0, totalrateqty = 0;
        //    foreach (GridViewRow g1 in gvPurchaseRecord.Rows)
        //    {
        //        string lbltotaltax = (g1.FindControl("lbl_tax_grd") as Label).Text;
        //        string lblrate = (g1.FindControl("lbl_rate_grd") as Label).Text;
        //        string lblqty = (g1.FindControl("lbl_quntity_grd") as Label).Text;
        //        totaltax = Convert.ToDecimal(lbltotaltax);

        //        rate111111 = Convert.ToDecimal(lblrate);
        //        Qty = Convert.ToDecimal(lblqty);
        //        Total11177 = ((Qty * rate111111) * totaltax) / 100;
        //        totalrateqty += Total11177;
        //    }
        //    if (txt_CompanyStateCode.Text == "27 MAHARASHTRA")
        //    {
        //        txt_cgst_amt.Text = Convert.ToDecimal(totalrateqty / 2).ToString("##.00");
        //        txt_sgst_amt.Text = Convert.ToDecimal(totalrateqty / 2).ToString("##.00");
        //        txt_igst_amt.Text = Convert.ToDecimal(00).ToString("##.00");
        //    }
        //    else
        //    {
        //        txt_cgst_amt.Text = Convert.ToDecimal(00).ToString("##.00");
        //        txt_sgst_amt.Text = Convert.ToDecimal(00).ToString("##.00");
        //        txt_igst_amt.Text = Convert.ToDecimal(totalrateqty).ToString("##.00");
        //    }
        //}
    }

    //---new code s

    public string ConvertNumbertoWords(int number)
    {
        if (number == 0)
            return "Zero";
        if (number < 0)
            return "Minus " + ConvertNumbertoWords(Math.Abs(number));
        string words = "";

        if ((number / 10000000) > 0)
        {
            words += ConvertNumbertoWords(number / 10000000) + " Crore ";
            number %= 10000000;
        }
        if ((number / 100000) > 0)
        {
            words += ConvertNumbertoWords(number / 100000) + " Lakh ";
            number %= 100000;
        }
        if ((number / 1000) > 0)
        {
            words += ConvertNumbertoWords(number / 1000) + " Thousand ";
            number %= 1000;
        }
        if ((number / 100) > 0)
        {
            words += ConvertNumbertoWords(number / 100) + " Hundred ";
            number %= 100;
        }
        if (number > 0)
        {
            if (words != "")
                words += "And ";
            var unitsMap = new[] { "Zero", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen" };
            var tensMap = new[] { "Zero", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety" };

            if (number < 20)
                words += unitsMap[number];
            else
            {
                words += tensMap[number / 10];
                if ((number % 10) > 0)
                    words += " " + unitsMap[number % 10];
            }
        }
        return words;
    }

    private static String ones(String Number)
    {
        int _Number = Convert.ToInt32(Number);
        String name = "";
        switch (_Number)
        {
            case 1:
                name = "One";
                break;
            case 2:
                name = "Two";
                break;
            case 3:
                name = "Three";
                break;
            case 4:
                name = "Four";
                break;
            case 5:
                name = "Five";
                break;
            case 6:
                name = "Six";
                break;
            case 7:
                name = "Seven";
                break;
            case 8:
                name = "Eight";
                break;
            case 9:
                name = "Nine";
                break;
        }
        return name;
    }

    private static String tens(String Number)
    {
        int _Number = Convert.ToInt32(Number);
        String name = null;
        switch (_Number)
        {
            case 10:
                name = "Ten";
                break;
            case 11:
                name = "Eleven";
                break;
            case 12:
                name = "Twelve";
                break;
            case 13:
                name = "Thirteen";
                break;
            case 14:
                name = "Fourteen";
                break;
            case 15:
                name = "Fifteen";
                break;
            case 16:
                name = "Sixteen";
                break;
            case 17:
                name = "Seventeen";
                break;
            case 18:
                name = "Eighteen";
                break;
            case 19:
                name = "Nineteen";
                break;
            case 20:
                name = "Twenty";
                break;
            case 30:
                name = "Thirty";
                break;
            case 40:
                name = "Forty";
                break;
            case 50:
                name = "Fifty";
                break;
            case 60:
                name = "Sixty";
                break;
            case 70:
                name = "Seventy";
                break;
            case 80:
                name = "Eighty";
                break;
            case 90:
                name = "Ninety";
                break;
            default:
                if (_Number > 0)
                {
                    name = tens(Number.Substring(0, 1) + "0") + " " + ones(Number.Substring(1));
                }
                break;
        }
        return name;
    }

    private static String ConvertWholeNumber(String Number)
    {
        string word = "";
        try
        {
            bool beginsZero = false;
            bool isDone = false;
            double dblAmt = (Convert.ToDouble(Number));

            if (dblAmt > 0)
            {
                beginsZero = Number.StartsWith("0");
                int numDigits = Number.Length;
                int pos = 0;
                String place = "";

                switch (numDigits)
                {
                    case 1:
                        word = ones(Number);
                        isDone = true;
                        break;
                    case 2:
                        word = tens(Number);
                        isDone = true;
                        break;
                    case 3:
                        pos = (numDigits % 3) + 1;
                        place = " Hundred ";
                        break;
                    case 4:
                    case 5:
                        pos = (numDigits % 4) + 1;
                        place = " Thousand ";
                        break;
                    case 6:
                    case 7:
                        pos = (numDigits % 6) + 1;
                        place = " Lakh ";
                        break;
                    case 8:
                    case 9:
                        pos = (numDigits % 8) + 1;
                        place = " Crore ";
                        break;
                    default:
                        isDone = true;
                        break;
                }

                if (!isDone)
                {
                    if (Number.Substring(0, pos) != "0" && Number.Substring(pos) != "0")
                    {
                        try
                        {
                            word = ConvertWholeNumber(Number.Substring(0, pos)) + place + ConvertWholeNumber(Number.Substring(pos));
                        }
                        catch { }
                    }
                    else
                    {
                        word = ConvertWholeNumber(Number.Substring(0, pos)) + ConvertWholeNumber(Number.Substring(pos));
                    }
                }

                if (word.Trim().Equals(place.Trim())) word = "";
            }
        }
        catch { }
        return word.Trim();
    }

    private static String ConvertToWords(String numb)
    {
        String val = "", wholeNo = numb, points = "", andStr = "", pointStr = "";
        String endStr = "Only";
        try
        {
            int decimalPlace = numb.IndexOf(".");
            if (decimalPlace > 0)
            {
                wholeNo = numb.Substring(0, decimalPlace);
                points = numb.Substring(decimalPlace + 1);
                if (Convert.ToInt32(points) > 0)
                {
                    andStr = "and";
                    endStr = "Paisa " + endStr;
                    pointStr = ConvertDecimals(points);
                }
            }
            val = String.Format("{0} {1}{2} {3}", ConvertWholeNumber(wholeNo).Trim(), andStr, pointStr, endStr);
        }
        catch { }
        return val;
    }

    private static String ConvertDecimals(String number)
    {
        String cd = "", digit = "", engOne = "";
        for (int i = 0; i < number.Length; i++)
        {
            digit = number[i].ToString();
            if (digit.Equals("0"))
            {
                engOne = "Zero";
            }
            else
            {
                engOne = ones(digit);
            }
            cd += " " + engOne;
        }
        return cd;
    }

    protected void gvPurchaseRecord_RowEditing(object sender, GridViewEditEventArgs e)
    {
        gvPurchaseRecord.EditIndex = e.NewEditIndex;
        gvPurchaseRecord.DataSource = (DataTable)ViewState["Invoice"];
        gvPurchaseRecord.DataBind();
        ScriptManager.RegisterStartupScript(this, this.GetType(), "Success", "scrollToElement();", true);
    }

    private decimal Total;
    decimal Alltotal, totaAmount18 = 0, totaAmount12 = 0, totaAmount28 = 0;
    string lbltotaltax, lblrate, lblqty, Amount;
    protected void gvPurchaseRecord_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {

            // cast the current row to a datarowview
            DataRowView row = e.Row.DataItem as DataRowView;
            Total += Convert.ToDecimal(DataBinder.Eval(e.Row.DataItem, "TotalAmount"));
            if (hdnPoProductTot.Value != "")
            {
                Alltotal = Convert.ToDecimal(hdnPoProductTot.Value) + Total;
            }
            else
            {
                Alltotal = Total;
            }

            txt_subtotal.Text = Alltotal.ToString("0.00");
            LinkButton lnkedit = e.Row.FindControl("btn_edit") as LinkButton;
            if (lnkedit == null)
            {
                lbltotaltax = (e.Row.FindControl("txt_quntity_grd") as TextBox).Text;
                lblrate = (e.Row.FindControl("txt_rate_grd") as TextBox).Text;
                lblqty = (e.Row.FindControl("txt_quntity_grd") as TextBox).Text;
                Amount = (e.Row.FindControl("txt_total_amount_grd") as TextBox).Text;
            }
            else
            {
                lbltotaltax = (e.Row.FindControl("lbl_tax_grd") as Label).Text;
                lblrate = (e.Row.FindControl("lbl_rate_grd") as Label).Text;
                lblqty = (e.Row.FindControl("lbl_quntity_grd") as Label).Text;
                Amount = (e.Row.FindControl("lbl_total_amount_grd") as Label).Text;
                totaltax = Convert.ToDecimal(lbltotaltax);
            }
            if (lbltotaltax == "12")
            {
                TaxPanel2.Visible = true;
                string Valt1 = hdn12.Value;
                Totaltax12 += Convert.ToDecimal(Amount);
                if (hdn18.Value != "")
                {
                    totaAmount12 = Convert.ToDecimal(Valt1) + Convert.ToDecimal(Totaltax12);
                }
                else
                {
                    totaAmount12 = Convert.ToDecimal(Totaltax12);
                }

                if (txt_CompanyStateCode.Text == "27 MAHARASHTRA")
                {
                    Label.Text = ((Convert.ToDecimal(totaAmount12) * Convert.ToDecimal(lbltotaltax) / 100) / 2).ToString("0.00");
                    TextBox2.Text = ((Convert.ToDecimal(totaAmount12) * Convert.ToDecimal(lbltotaltax) / 100) / 2).ToString("0.00");
                    TextBox3.Text = Convert.ToDecimal(00).ToString("0.00");
                }
                else
                {
                    TextBox3.Text = ((Convert.ToDecimal(totaAmount12) * Convert.ToDecimal(lbltotaltax) / 100)).ToString("0.00");
                    Label.Text = Convert.ToDecimal(00).ToString("0.00");
                    TextBox2.Text = Convert.ToDecimal(00).ToString("0.00");
                }
            }
            if (lbltotaltax == "18")
            {
                TaxPanel1.Visible = true;
                Totaltax18 += Convert.ToDecimal(Amount);
                string Valt2 = hdn18.Value;
                if (hdn18.Value != "")
                {
                    totaAmount18 = Convert.ToDecimal(Valt2) + Convert.ToDecimal(Totaltax18);
                }
                else
                {
                    totaAmount18 = Convert.ToDecimal(Totaltax18);
                }

                if (txt_CompanyStateCode.Text == "27 MAHARASHTRA")
                {
                    txt_cgst_amt.Text = ((Convert.ToDecimal(totaAmount18) * Convert.ToDecimal(lbltotaltax) / 100) / 2).ToString("0.00");
                    txt_sgst_amt.Text = ((Convert.ToDecimal(totaAmount18) * Convert.ToDecimal(lbltotaltax) / 100) / 2).ToString("0.00");
                    txt_igst_amt.Text = Convert.ToDecimal(00).ToString("0.00");
                }
                else
                {
                    txt_igst_amt.Text = ((Convert.ToDecimal(totaAmount18) * Convert.ToDecimal(lbltotaltax) / 100)).ToString("0.00");
                    txt_cgst_amt.Text = Convert.ToDecimal(00).ToString("0.00");
                    txt_sgst_amt.Text = Convert.ToDecimal(00).ToString("0.00");
                }
            }
            if (lbltotaltax == "28")
            {
                TaxPanel3.Visible = true;
                Totaltx28 += Convert.ToDecimal(Amount);
                string Valt3 = hdn28.Value;
                if (hdn18.Value != "")
                {
                    totaAmount28 = Convert.ToDecimal(Valt3) + Convert.ToDecimal(Totaltx28);
                }
                else
                {
                    totaAmount18 = Convert.ToDecimal(Totaltx28);
                }

                if (txt_CompanyStateCode.Text == "27 MAHARASHTRA")
                {
                    TextBox4.Text = ((Convert.ToDecimal(Totaltx28) * Convert.ToDecimal(lbltotaltax) / 100) / 2).ToString("0.00");
                    TextBox5.Text = ((Convert.ToDecimal(Totaltx28) * Convert.ToDecimal(lbltotaltax) / 100) / 2).ToString("0.00");
                    TextBox6.Text = Convert.ToDecimal(00).ToString("0.00");
                }
                else
                {
                    TextBox6.Text = ((Convert.ToDecimal(Totaltx28) * Convert.ToDecimal(lbltotaltax) / 100)).ToString("0.00");
                    TextBox4.Text = Convert.ToDecimal(00).ToString("0.00");
                    TextBox5.Text = Convert.ToDecimal(00).ToString("0.00");
                }
            }

            decimal grd_total;
            if (!string.IsNullOrEmpty(txt_total_amount.Text))
            {
                grd_total = 0;
            }
            else
            {
                decimal val1 = Convert.ToDecimal(txt_subtotal.Text);
                decimal val2 = Convert.ToDecimal(txt_sgst_amt.Text);
                decimal val3 = Convert.ToDecimal(txt_cgst_amt.Text);
                decimal val4 = Convert.ToDecimal(txt_igst_amt.Text);
                decimal val5 = Convert.ToDecimal(Label.Text);
                decimal val6 = Convert.ToDecimal(TextBox2.Text);
                decimal val7 = Convert.ToDecimal(TextBox3.Text);
                decimal val8 = Convert.ToDecimal(TextBox4.Text);
                decimal val9 = Convert.ToDecimal(TextBox5.Text);
                decimal val10 = Convert.ToDecimal(TextBox6.Text);
                grd_total = (val1 + val2 + val3 + val4 + val5 + val6 + val7 + val8 + val9 + val10);

                //Temp change 
                //var Cgst_Total_Amt1 = (val3 * 9 / 100);
                //decimal Cgst_Total_Amt = Cgst_Total_Amt1;
                //var Sgst_Total_Amt1 = (val2 * 9 / 100);
                //decimal Sgst_Total_Amt = Sgst_Total_Amt1;
                //decimal SubTotal_Amt = (val1);
                //txt_grand_total.Text = (SubTotal_Amt + Cgst_Total_Amt + Sgst_Total_Amt).ToString();

            }
            //txt_grand_total.Text = grd_total.ToString();
            txt_grand_total.Text = grd_total.ToString("##.00");
            hfTotal.Value = txt_grand_total.Text;

            string isNegative = "";
            try
            {
                string number = hfTotal.Value;
                number = Convert.ToDouble(number).ToString();

                lbl_Amount_In_Word.Text = isNegative + ConvertToWords(number);
            }
            catch (Exception)
            {
                throw;
            }

            //Round Off
            var Totalamtfff = Convert.ToDouble(txt_grand_total.Text);
            var totalgrand = Math.Round(Totalamtfff);
            System.Globalization.CultureInfo info = System.Globalization.CultureInfo.GetCultureInfo("en-IN");
            string FinaleTotalamt = Totalamtfff.ToString("N2", info);
            double GetVal = 0;  // to know rounded value
            GetVal -= Convert.ToDouble(Totalamtfff) - Convert.ToDouble(totalgrand);
            Double roundoff = Math.Round(GetVal, 2);
            txtroundoff.Text = roundoff.ToString();
            //txt_grand_total.Text = totalgrand.ToString();
            txt_grand_total.Text = totalgrand.ToString("##.00");
        }
    }

    protected void gv_update_Click(object sender, EventArgs e)
    {
        GridViewRow row = (sender as LinkButton).NamingContainer as GridViewRow;

        string printdescription = ((TextBox)row.FindControl("txt_printdescription_grd")).Text;
        string Tax = ((TextBox)row.FindControl("txt_tax_grd")).Text;
        string Quntity = ((TextBox)row.FindControl("txt_quntity_grd")).Text;
        string Rate = ((TextBox)row.FindControl("txt_rate_grd")).Text;
        string Discount = ((TextBox)row.FindControl("txt_discount_grd")).Text;
        string TotalAmount = ((TextBox)row.FindControl("txt_total_amount_grd")).Text;

        DataTable Dt = ViewState["Invoice"] as DataTable;

        Dt.Rows[row.RowIndex]["printdescription"] = printdescription;
        Dt.Rows[row.RowIndex]["Tax"] = Tax;
        Dt.Rows[row.RowIndex]["Quntity"] = Quntity;
        Dt.Rows[row.RowIndex]["Rate"] = Rate;
        Dt.Rows[row.RowIndex]["Discount"] = Discount;
        Dt.Rows[row.RowIndex]["TotalAmount"] = TotalAmount;

        Dt.AcceptChanges();

        ViewState["Invoice"] = Dt;
        gvPurchaseRecord.EditIndex = -1;

        gvPurchaseRecord.DataSource = (DataTable)ViewState["Invoice"];
        gvPurchaseRecord.DataBind();
        ScriptManager.RegisterStartupScript(this, this.GetType(), "Success", "scrollToElement();", true);
    }

    protected void txt_rate_grd_TextChanged(object sender, EventArgs e)
    {
        GridViewRow row = (sender as TextBox).NamingContainer as GridViewRow;

        GriCalculation(row);
    }

    protected void txt_quntity_grd_TextChanged(object sender, EventArgs e)
    {
        GridViewRow row = (sender as TextBox).NamingContainer as GridViewRow;

        GriCalculation(row);
    }

    protected void txt_tax_grd_TextChanged(object sender, EventArgs e)
    {
        GridViewRow row = (sender as TextBox).NamingContainer as GridViewRow;

        GriCalculation(row);
    }

    protected void txt_discount_grd_TextChanged(object sender, EventArgs e)
    {
        GridViewRow row = (sender as TextBox).NamingContainer as GridViewRow;

        GriCalculation(row);
    }

    protected void btn_save_Click(object sender, EventArgs e)
    {
        if (btn_save.Text == "Save")
        {
            if (ChkSendQuotation.Checked == true)
            {
                SaveRecord();
                Send_Mail();
            }
            else
            {
                SaveRecord();
            }
        }
        if (btn_save.Text == "Update")
        {
            if (ChkSendQuotation.Checked == true)
            {
                SaveRecord();
                Send_Mail();
                //foreach (GridViewRow g1 in Grd_MAIL.Rows)
                //{
                //    string MAIL = (g1.FindControl("lblmultMail") as Label).Text;
                //    bool chkmail = (g1.FindControl("chkmail") as CheckBox).Checked;

                //    if (chkmail == false)
                //    {
                //        //ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('Select Atleast One Mail_ID');", true);
                //        //ClientScript.RegisterStartupScript(this.GetType(), "alert", "HideLabe('Select Atleast One Mail_ID');", true);
                //    }
                //    else
                //    {

                //        string ChallanNo = ToString();
                //        Send_Mail();
                //    }
                //}
                //Checmail();
                //SaveRecord();
                //string ChallanNo = ToString();
                //Send_Mail();
            }
            else
            {
                SaveRecord();
            }
        }
        //if (ChkSendQuotation.Checked == true)
        //{

        //    SaveRecord();
        //    string InvoiceNo = ToString();
        //    Send_Mail();
        //}
        //else
        //{
        //    SaveRecord();
        //}
    }

    protected void Send_Mail()
    {
        string strMessage =

               "<strong>Dear Sir," + "<br/><br/>" +

                      "Greetings from " + "<strong>Endeavour  Automation...!" + "<br/><br/>" +

                       "Please find the attached offer for your reference." + " <br/><br/>" +

                        "Please find the attached offer for your reference. " + "Invoice No. - " + txt_InvoiceNo.Text.Trim() + ".pdf" + "<br/><br/>" +

                       "We hope that we will receive a Purchase Order Soon." + " <br/><br/>" +

                       "Please do not hesitate to contact us for any query or clarification." + " <br/><br/>" +

                      "Thanks & Regards." + "<br/>" +
                      "<strong>ENDEAVOUR AUTOMATION<strong>";

        string pdfname = "TaxInv - " + txt_InvoiceNo.Text.Trim() + "/" + txt_InvoiceDate.Text.Trim() + ".pdf";

        MailMessage message = new MailMessage();
        //MailMessage msgendeaour = new MailMessage();
        //MailMessage msgenaccount = new MailMessage();
        //msgendeaour.To.Add("erp@weblinkservices.net");
        //msgenaccount.To.Add("erp@weblinkservices.net");
        foreach (GridViewRow g1 in Grd_MAIL.Rows)
        {
            string MAIL = (g1.FindControl("lblmultMail") as Label).Text;
            bool chkmail = (g1.FindControl("chkmail") as CheckBox).Checked;
            if (chkmail == true)
            {
                message.To.Add(MAIL);// Email-ID of Receiver  
            }
        }
        //message.To.Add(txt_Mail.Text);// Email-ID of Receiver  
        message.Subject = "Tax Invoice";// Subject of Email  
        message.Body = strMessage;
        //msgendeaour.Subject = "Tax Invoice";// Subject of Email  
        //msgendeaour.Body = strMessage;
        //msgenaccount.Subject = "Tax Invoice";// Subject of Email  
        //msgenaccount.Body = strMessage;

        message.From = new MailAddress("enquiry@weblinkservices.net", "info@endeavours.in");
        //message.From = new System.Net.Mail.MailAddress("info@endeavours.in");// Email-ID of Sender  
        // message.From = new System.Net.Mail.MailAddress("enquiry@weblinkservices.net");// Email-ID of Sender  
        message.IsBodyHtml = true;
        //msgendeaour.From = new System.Net.Mail.MailAddress("enquiry@weblinkservices.net");// Email-ID of Sender  
        //msgendeaour.IsBodyHtml = true;
        //msgenaccount.From = new System.Net.Mail.MailAddress("enquiry@weblinkservices.net");// Email-ID of Sender  
        //msgenaccount.IsBodyHtml = true;

        MemoryStream file = new MemoryStream(PDF("This is pdf file text", Server.MapPath("~/Files/")).ToArray());

        file.Seek(0, SeekOrigin.Begin);
        Attachment data = new Attachment(file, pdfname, "application/pdf");
        ContentDisposition disposition = data.ContentDisposition;
        disposition.CreationDate = System.DateTime.Now;
        disposition.ModificationDate = System.DateTime.Now;
        disposition.DispositionType = DispositionTypeNames.Attachment;
        message.Attachments.Add(data);//Attach the file  
                                      //msgendeaour.Attachments.Add(data);//Attach the file
                                      //msgenaccount.Attachments.Add(data);//Attach the file


        //message.Body = txtmessagebody.Text;
        SmtpClient SmtpMail = new SmtpClient();
        SmtpMail.Host = "smtpout.secureserver.net"; // Name or IP-Address of Host used for SMTP transactions  
        SmtpMail.Port = 587; // Port for sending the mail  
        SmtpMail.Credentials = new System.Net.NetworkCredential("enquiry@weblinkservices.net", "wlspl@123"); // Username/password of network, if apply  
        SmtpMail.DeliveryMethod = SmtpDeliveryMethod.Network;
        SmtpMail.EnableSsl = false;

        SmtpMail.ServicePoint.MaxIdleTime = 0;
        SmtpMail.ServicePoint.SetTcpKeepAlive(true, 2000, 2000);
        message.BodyEncoding = Encoding.Default;
        message.Priority = MailPriority.High;
        SmtpMail.Send(message);
        ScriptManager.RegisterStartupScript(this, this.GetType(), "Alert", "alert('Mail Send Successfully !!');", true);
        Response.Write("Email has been sent");
    }

    private MemoryStream PDF(string InvoiceNo, string message)
    {
        MemoryStream pdf = new MemoryStream();

        //foreach (GridViewRow g1 in Grd_MAIL.Rows)
        //{
        //    string MAIL = (g1.FindControl("lblmultMail") as Label).Text;
        //    bool chkmail = (g1.FindControl("chkmail") as CheckBox).Checked;
        //    if (chkmail == true)
        //    {
        //SqlDataAdapter Da = new SqlDataAdapter("SELECT * FROM vw_Taxinvoice_pdf WHERE InvoiceNo='" + txt_InvoiceNo.Text + "' AND Email='" + MAIL + "'   ", con);

        //Changes for Temparay
        SqlDataAdapter Da = new SqlDataAdapter("SELECT * FROM vw_Taxinvoice_pdf As TP Inner join tbl_Invoice_both_Dtls As TD on TP.Id= TD.InvoiceId WHERE TP.InvoiceNo='" + txt_InvoiceNo.Text + "' ", con);
        // SqlDataAdapter Da = new SqlDataAdapter("SELECT * FROM vw_Taxinvoice_pdf WHERE InvoiceNo='" + txt_InvoiceNo.Text + "' ", con);
        DataTable Dt = new DataTable();
        Da.Fill(Dt);
        StringWriter sw = new StringWriter();
        StringReader sr = new StringReader(sw.ToString());

        Document doc = new Document(PageSize.A4, 10f, 10f, 55f, 0f);
        PdfWriter pdfWriter = PdfWriter.GetInstance(doc, pdf);

        PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(Server.MapPath("~/Files/") + "TaxInvoice.pdf", FileMode.Create));
        //PdfWriter writer = PdfWriter.GetInstance(doc, Response.OutputStream);
        XMLWorkerHelper.GetInstance().ParseXHtml(writer, doc, sr);

        doc.Open();
        //byte[] file;
        //file = System.IO.File.ReadAllBytes(message);
        //iTextSharp.text.Image jpg = iTextSharp.text.Image.GetInstance(file);

        //jpg.ScaleToFit(550F, 200F);
        //doc.Add(jpg);

        string imageURL = Server.MapPath("~") + "/image/AA.png";

        iTextSharp.text.Image png = iTextSharp.text.Image.GetInstance(imageURL);

        //Resize image depend upon your need

        png.ScaleToFit(70, 100);

        //For Image Position
        png.SetAbsolutePosition(40, 745);
        //var document = new Document();

        //Give space before image
        //png.ScaleToFit(document.PageSize.Width - (document.RightMargin * 100), 50);
        png.SpacingBefore = 50f;

        //Give some space after the image

        png.SpacingAfter = 1f;

        png.Alignment = Element.ALIGN_LEFT;

        //paragraphimage.Add(png);
        //doc.Add(paragraphimage);
        doc.Add(png);

        PdfContentByte cb = pdfWriter.DirectContent;
        cb.Rectangle(17f, 735f, 560f, 60f);
        cb.Stroke();
        // Header 
        cb.BeginText();
        cb.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 20);
        cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "ENDEAVOUR AUTOMATION", 185, 773, 0);
        cb.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 11);
        cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Survey No. 27, Nilambkar Nagar, Near Raghunandan Karyalay,", 155, 755, 0);
        cb.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 11);
        cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Tathawade, Pune-411033", 232, 740, 0);
        cb.EndText();

        PdfContentByte cbb = pdfWriter.DirectContent;
        cbb.Rectangle(17f, 710f, 560f, 25f);
        cbb.Stroke();
        // Header 
        cbb.BeginText();
        cbb.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 10);
        cbb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, " Mob: 9860502108    Email: endeavour.automations@gmail.com ", 153, 722, 0);
        cbb.EndText();

        PdfContentByte cbbb = pdfWriter.DirectContent;
        cbbb.Rectangle(17f, 685f, 560f, 25f);
        cbbb.Stroke();
        // Header 
        cbbb.BeginText();
        cbbb.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 10);
        cbbb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "GSTIN :  27AFYPJ3488G1ZQ ", 30, 695, 0);
        cbbb.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 10);
        cbbb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "W.E.F. :  01/07/2017", 185, 695, 0);
        cbbb.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 10);
        cbbb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "PAN No. :  AFYPJ3488G", 310, 695, 0);
        cbbb.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 10);
        cbbb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "State Code :  27 Maharashtra", 440, 695, 0);
        cbbb.EndText();

        PdfContentByte cd = pdfWriter.DirectContent;
        cd.Rectangle(17f, 660f, 560f, 25f);
        cd.Stroke();
        // Header 
        cd.BeginText();
        cd.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 17);
        cd.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Tax Invoice", 260, 667, 0);
        cd.EndText();

        Paragraph paragraphTable1 = new Paragraph();
        paragraphTable1.SpacingBefore = 120f;
        paragraphTable1.SpacingAfter = 10f;

        PdfPTable table = new PdfPTable(4);

        float[] widths2 = new float[] { 100, 180, 100, 180 };
        table.SetWidths(widths2);
        table.TotalWidth = 560f;
        table.LockedWidth = true;

        if (Dt.Rows.Count > 0)
        {
            var CreateDate = DateTime.Now.ToString("yyyy-MM-dd");
            string CustName = Dt.Rows[0]["CustName"].ToString();
            string Invoicen = Dt.Rows[0]["InvoiceNo"].ToString();
            string PoDate = Dt.Rows[0]["PoDate"].ToString().TrimEnd("0:0".ToCharArray());
            string PoNumber = Dt.Rows[0]["PoNo"].ToString();
            string CompanyAddress = Dt.Rows[0]["CompanyAddress"].ToString();
            string Address = Dt.Rows[0]["CustomerShippingAddress"].ToString();
            string InvoiceDate = Dt.Rows[0]["InvoiceDate"].ToString().TrimEnd("0:0".ToCharArray());
            string ChallanNo = Dt.Rows[0]["ChallanNo"].ToString();
            string GSTNo = Dt.Rows[0]["CustomerGstNo"].ToString();
            string KindAtt = Dt.Rows[0]["KindAtt"].ToString();
            string TotalInWord = Dt.Rows[0]["TotalInWord"].ToString();
            string GrandTotal = Dt.Rows[0]["GrandTotal"].ToString();
            string CGST = Dt.Rows[0]["CGST"].ToString();
            string SGST = Dt.Rows[0]["SGST"].ToString();
            string Total = Dt.Rows[0]["AllTotalAmount"].ToString();

            DateTime ffff1 = Convert.ToDateTime(Dt.Rows[0]["InvoiceDate"].ToString());
            string datee = ffff1.ToString("dd-MM-yyyy");

            DateTime ffff2 = Convert.ToDateTime(Dt.Rows[0]["PoDate"].ToString());
            string podate = ffff1.ToString("dd-MM-yyyy");

            table.AddCell(new Phrase("Buyer : ", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(CustName, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            table.AddCell(new Phrase("Consignee :", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(CustName, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            table.AddCell(new Phrase("Shipping Address : ", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(CompanyAddress, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            table.AddCell(new Phrase("Billing Address : ", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(Address, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            table.AddCell(new Phrase("Invoice Number : ", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(Invoicen, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            table.AddCell(new Phrase("Invoice Date :", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(datee, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            //table.AddCell(new Phrase("Address", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            //table.AddCell(new Phrase(Address, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            table.AddCell(new Phrase("P.O. Number :", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(PoNumber, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            table.AddCell(new Phrase("P.O. Date :", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(podate, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            table.AddCell(new Phrase("Challan No. :", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(ChallanNo, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            table.AddCell(new Phrase("GST No. :", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(GSTNo, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            table.AddCell(new Phrase("Created Date :", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(CreateDate, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            table.AddCell(new Phrase("Kind Attn. :", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(KindAtt, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            //table.AddCell(new Phrase("Invoice Number : ", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            //table.AddCell(new Phrase(Invoicen, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            //table.AddCell(new Phrase("PO Number :", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            //table.AddCell(new Phrase(PoNumber, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            //table.AddCell(new Phrase("Address", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            //table.AddCell(new Phrase(Address, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            //table.AddCell(new Phrase("Invoice Date :", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            //table.AddCell(new Phrase(InvoiceDate, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            //table.AddCell(new Phrase("Challan No :", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            //table.AddCell(new Phrase(ChallanNo, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            //table.AddCell(new Phrase("GST No :", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            //table.AddCell(new Phrase(GSTNo, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            //table.AddCell(new Phrase("Created Date :", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            //table.AddCell(new Phrase(CreateDate, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            //table.AddCell(new Phrase("Kind Attn. :", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            //table.AddCell(new Phrase(KindAtt, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            paragraphTable1.Add(table);
            doc.Add(paragraphTable1);

            Paragraph paragraphTable2 = new Paragraph();
            paragraphTable2.SpacingAfter = 0f;
            table = new PdfPTable(9);
            float[] widths3 = new float[] { 4f, 19f, 10f, 8f, 8f, 8f, 11f, 8f, 12f };
            table.SetWidths(widths3);

            double Ttotal_price = 0;
            //DataTable Dt = Read_Table("SELECT * FROM vw_Quotation_Invoice");

            if (Dt.Rows.Count > 0)
            {
                table.TotalWidth = 560f;
                table.LockedWidth = true;
                table.AddCell(new Phrase("SN.", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                table.AddCell(new Phrase("Description", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                table.AddCell(new Phrase("Hsn / Sac", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                table.AddCell(new Phrase("Tax %", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                table.AddCell(new Phrase("Quantity", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                table.AddCell(new Phrase("Unit", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                table.AddCell(new Phrase("Rate", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                table.AddCell(new Phrase("Disc %", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                table.AddCell(new Phrase("Total", FontFactory.GetFont("Arial", 10, Font.BOLD)));

                int rowid = 1;
                foreach (DataRow dr in Dt.Rows)
                {

                    table.TotalWidth = 560f;
                    table.LockedWidth = true;

                    //// double Ftotal = Convert.ToDouble(dr["Total"].ToString());
                    // string _ftotal = Ftotal.ToString("##.00");
                    // table.AddCell(new Phrase(rowid.ToString(), FontFactory.GetFont("Arial", 9)));
                    // table.AddCell(new Phrase(dr["Description"].ToString(), FontFactory.GetFont("Arial", 9)));
                    // table.AddCell(new Phrase(dr["Hsn"].ToString(), FontFactory.GetFont("Arial", 9)));
                    // table.AddCell(new Phrase(dr["TaxPercentage"].ToString(), FontFactory.GetFont("Arial", 9)));
                    // table.AddCell(new Phrase(dr["Quntity"].ToString(), FontFactory.GetFont("Arial", 9)));
                    // table.AddCell(new Phrase(dr["Unit"].ToString(), FontFactory.GetFont("Arial", 9)));
                    // table.AddCell(new Phrase(dr["Rate"].ToString(), FontFactory.GetFont("Arial", 9)));
                    // table.AddCell(new Phrase(dr["DiscountPercentage"].ToString(), FontFactory.GetFont("Arial", 9)));
                    // table.AddCell(new Phrase(_ftotal, FontFactory.GetFont("Arial", 9)));
                    // rowid++;

                    // //Ttotal_price += Convert.ToDouble(dr["Total"].ToString());

                    // //Ttotal_price += Convert.ToDouble(dr["AllTotalAmount"].ToString());


                    //Temp changes


                    // double Ftotal = Convert.ToDouble(dr["Total"].ToString());
                    double Ftotal = Convert.ToDouble(dr["Total1"].ToString());
                    //double Ftotal = Convert.ToDouble(dr["AllTotalAmount"].ToString());
                    string _ftotal = Ftotal.ToString("##.00");
                    table.AddCell(new Phrase(rowid.ToString(), FontFactory.GetFont("Arial", 9)));
                    table.AddCell(new Phrase(dr["Description1"].ToString(), FontFactory.GetFont("Arial", 9)));
                    table.AddCell(new Phrase(dr["Hsn1"].ToString(), FontFactory.GetFont("Arial", 9)));
                    table.AddCell(new Phrase(dr["TaxPercentage1"].ToString(), FontFactory.GetFont("Arial", 9)));
                    table.AddCell(new Phrase(dr["Quntity1"].ToString(), FontFactory.GetFont("Arial", 9)));
                    table.AddCell(new Phrase(dr["Unit1"].ToString(), FontFactory.GetFont("Arial", 9)));
                    table.AddCell(new Phrase(dr["Rate1"].ToString(), FontFactory.GetFont("Arial", 9)));
                    table.AddCell(new Phrase(dr["DiscountPercentage1"].ToString(), FontFactory.GetFont("Arial", 9)));
                    table.AddCell(new Phrase(_ftotal, FontFactory.GetFont("Arial", 9)));
                    rowid++;

                    //Ttotal_price += Convert.ToDouble(dr["Total"].ToString());
                    Ttotal_price += Convert.ToDouble(dr["Total1"].ToString());
                    //Ttotal_price += Convert.ToDouble(dr["AllTotalAmount"].ToString());
                }
            }
            paragraphTable2.Add(table);
            doc.Add(paragraphTable2);

            //Space
            Paragraph paragraphTable3 = new Paragraph();

            string[] items = { "Goods once sold will not be taken back or exchange. \b",
                        "Interest at the rate of 18% will be charged if bill is'nt paid within 30 days.\b",
                        "Our risk and responsibility ceases the moment goods leaves out godown. \n",
                        };

            Font font12 = FontFactory.GetFont("Arial", 12, Font.BOLD);
            Font font10 = FontFactory.GetFont("Arial", 10, Font.BOLD);
            Paragraph paragraph = new Paragraph("", font12);

            for (int i = 0; i < items.Length; i++)
            {
                paragraph.Add(new Phrase("", font10));
            }

            table = new PdfPTable(9);
            table.TotalWidth = 560f;
            table.LockedWidth = true;
            table.SetWidths(new float[] { 4f, 19f, 10f, 8f, 8f, 8f, 11f, 8f, 12f });
            table.AddCell(paragraph);
            table.AddCell(new Phrase("", FontFactory.GetFont("Arial", 10, Font.BOLD)));
            table.AddCell(new Phrase("", FontFactory.GetFont("Arial", 10, Font.BOLD)));
            table.AddCell(new Phrase("", FontFactory.GetFont("Arial", 10, Font.BOLD)));
            table.AddCell(new Phrase("", FontFactory.GetFont("Arial", 10, Font.BOLD)));
            table.AddCell(new Phrase("", FontFactory.GetFont("Arial", 10, Font.BOLD)));
            table.AddCell(new Phrase("", FontFactory.GetFont("Arial", 10, Font.BOLD)));
            table.AddCell(new Phrase("", FontFactory.GetFont("Arial", 10, Font.BOLD)));
            //table.AddCell(new Phrase("", FontFactory.GetFont("Arial", 10, Font.BOLD)));
            //table.AddCell(new Phrase("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", FontFactory.GetFont("Arial", 10, Font.BOLD)));

            //doc.Add(table);
            if (Dt.Rows.Count >= 10)
            {
                table.AddCell(new Phrase("  \n\n\n\n\n\n", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                //doc.Add(table);
            }
            else if (Dt.Rows.Count >= 7 && Dt.Rows.Count <= 9)
            {
                table.AddCell(new Phrase("  \n\n\n\n\n", FontFactory.GetFont("Arial", 10, Font.BOLD)));

            }
            else if (Dt.Rows.Count >= 4 && Dt.Rows.Count <= 6)
            {
                table.AddCell(new Phrase("  \n\n\n\n\n\n\n\n\n\n", FontFactory.GetFont("Arial", 10, Font.BOLD)));

            }
            else if (Dt.Rows.Count < 4)
            {

                table.AddCell(new Phrase("  \n\n\n\n\n\n\n\n\n\n", FontFactory.GetFont("Arial", 10, Font.BOLD)));

            }
            doc.Add(table);
            //Add Total Row start
            Paragraph paragraphTable5 = new Paragraph();

            //paragraphTable5.SpacingAfter = 10f;   

            string[] itemsss = { "Goods once sold will not be taken back or exchange. \b",
                        "Interest at the rate of 18% will be charged if bill is'nt paid within 30 days.\b",
                        "Our risk and responsibility ceases the moment goods leaves out godown. \n",
                        };

            Font font13 = FontFactory.GetFont("Arial", 12, Font.BOLD);
            Font font11 = FontFactory.GetFont("Arial", 10, Font.BOLD);
            Paragraph paragraphh = new Paragraph("", font12);

            //paragraphh.SpacingAfter = 10f;

            for (int i = 0; i < items.Length; i++)
            {
                paragraph.Add(new Phrase("", font10));
            }

            table = new PdfPTable(3);
            table.TotalWidth = 560f;
            table.LockedWidth = true;

            paragraph.Alignment = Element.ALIGN_RIGHT;

            table.SetWidths(new float[] { 0f, 76f, 12f });
            table.AddCell(paragraph);
            PdfPCell cell = new PdfPCell(new Phrase("Sub Total", FontFactory.GetFont("Arial", 10, Font.BOLD)));
            cell.HorizontalAlignment = Element.ALIGN_RIGHT;
            table.AddCell(cell);
            PdfPCell cell11 = new PdfPCell(new Phrase(Ttotal_price.ToString("##.00"), FontFactory.GetFont("Arial", 10, Font.BOLD)));
            cell11.HorizontalAlignment = Element.ALIGN_RIGHT;
            table.AddCell(cell11);
            doc.Add(table);
            // add total row end

            //CGST 9% Row STart
            Paragraph paragraphTable15 = new Paragraph();
            paragraphTable5.SpacingAfter = 0f;
            //paragraphTable15
            //paragraphTable5.SpacingAfter = 10f;

            string[] itemss = { "Goods once sold will not be taken back or exchange. \b",
                        "Interest at the rate of 18% will be charged if bill is'nt paid within 30 days.\b",
                        "Our risk and responsibility ceases the moment goods leaves out godown. \n",
                        };

            Font font1 = FontFactory.GetFont("Arial", 12, Font.BOLD);
            Font font2 = FontFactory.GetFont("Arial", 10, Font.BOLD);
            Paragraph paragraphhh = new Paragraph("", font12);

            //paragraphh.SpacingAfter = 10f;

            for (int i = 0; i < items.Length; i++)
            {
                paragraph.Add(new Phrase("", font10));
            }

            table = new PdfPTable(3);
            table.TotalWidth = 560f;
            table.LockedWidth = true;

            //var Cgst_9 = Convert.ToDecimal(Ttotal_price) * 9 / 100;

            table.SetWidths(new float[] { 0f, 76f, 12f });
            table.AddCell(paragraph);
            PdfPCell cell2 = new PdfPCell(new Phrase("CGST %", FontFactory.GetFont("Arial", 10, Font.BOLD)));
            cell2.HorizontalAlignment = Element.ALIGN_RIGHT;
            table.AddCell(cell2);
            PdfPCell cell3 = new PdfPCell(new Phrase(CGST, FontFactory.GetFont("Arial", 10, Font.BOLD)));
            cell3.HorizontalAlignment = Element.ALIGN_RIGHT;
            table.AddCell(cell3);

            doc.Add(table);
            //CGST 9% Row End

            //SGST 9% Row STart
            Paragraph paragraphTable16 = new Paragraph();
            paragraphTable5.SpacingAfter = 10f;

            //paragraphTable5.SpacingAfter = 10f;

            string[] item = { "Goods once sold will not be taken back or exchange. \b",
                        "Interest at the rate of 18% will be charged if bill is'nt paid within 30 days.\b",
                        "Our risk and responsibility ceases the moment goods leaves out godown. \n",
                        };

            Font font14 = FontFactory.GetFont("Arial", 12, Font.BOLD);
            Font font15 = FontFactory.